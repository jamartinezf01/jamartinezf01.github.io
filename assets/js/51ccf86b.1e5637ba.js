"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[6801],{7024:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/cambios en Tiempo Real","title":"Lectura en Tiempo Real","description":"Uno de los aspectos m\xe1s potentes de Firebase Realtime Database es la capacidad de escuchar los cambios en la base de datos en tiempo real. Es decir, cuando se modifica un nodo (ya sea por creaci\xf3n, actualizaci\xf3n o eliminaci\xf3n de datos), los clientes que est\xe9n suscritos a ese nodo reciben autom\xe1ticamente la actualizaci\xf3n sin tener que realizar consultas adicionales.","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/cambios en Tiempo Real.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database","slug":"/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/cambios en Tiempo Real","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/cambios en Tiempo Real","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var a=s(4848),r=s(8453);const o={sidebar_position:5},l="Lectura en Tiempo Real",c={},d=[{value:"1. <strong>Concepto General</strong>",id:"1-concepto-general",level:2},{value:"2. <strong>M\xe9todos Principales para la Escucha</strong>",id:"2-m\xe9todos-principales-para-la-escucha",level:2},{value:"<code>ValueEventListener</code>",id:"valueeventlistener",level:3},{value:"<code>ChildEventListener</code>",id:"childeventlistener",level:3},{value:"3. <strong>Ejemplo</strong>: Lista de Anuncios en Tiempo Real",id:"3-ejemplo-lista-de-anuncios-en-tiempo-real",level:2},{value:"<strong>Modelo de Datos</strong>:",id:"modelo-de-datos",level:3},{value:"<strong>Suscribirse con <code>ValueEventListener</code></strong>:",id:"suscribirse-con-valueeventlistener",level:3},{value:"4. <strong>Suscribirse y Desuscribirse</strong>",id:"4-suscribirse-y-desuscribirse",level:2},{value:"5. <strong>Secuencia de observaci\xf3n de los Cambios en Tiempo Real</strong>",id:"5-secuencia-de-observaci\xf3n-de-los-cambios-en-tiempo-real",level:2},{value:"<strong>Buenas Pr\xe1cticas</strong>",id:"buenas-pr\xe1cticas",level:2}];function t(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"lectura-en-tiempo-real",children:"Lectura en Tiempo Real"})}),"\n",(0,a.jsxs)(n.p,{children:["Uno de los aspectos m\xe1s potentes de ",(0,a.jsx)(n.strong,{children:"Firebase Realtime Database"})," es la capacidad de ",(0,a.jsx)(n.strong,{children:"escuchar"})," los cambios en la base de datos ",(0,a.jsx)(n.strong,{children:"en tiempo real"}),". Es decir, cuando se modifica un nodo (ya sea por creaci\xf3n, actualizaci\xf3n o eliminaci\xf3n de datos), los clientes que est\xe9n suscritos a ese nodo reciben autom\xe1ticamente la actualizaci\xf3n sin tener que realizar consultas adicionales."]}),"\n",(0,a.jsxs)(n.p,{children:["A continuaci\xf3n, veremos ",(0,a.jsx)(n.strong,{children:"c\xf3mo"})," funciona esta caracter\xedstica, cu\xe1les son los ",(0,a.jsx)(n.strong,{children:"diferentes tipos de listeners"})," y c\xf3mo ",(0,a.jsx)(n.strong,{children:"implementarlos"})," en Android con ",(0,a.jsx)(n.strong,{children:"Java"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"1-concepto-general",children:["1. ",(0,a.jsx)(n.strong,{children:"Concepto General"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Suscripci\xf3n"}),": Tu aplicaci\xf3n se \u201csuscribe\u201d a un nodo o rama concreta de la base de datos."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Eventos"}),": Cada vez que en el ",(0,a.jsx)(n.strong,{children:"nodo"})," (o en alguno de sus subnodos) sucede un cambio, Firebase notifica al ",(0,a.jsx)(n.strong,{children:"listener"})," (en tu app) para que procese la informaci\xf3n actualizada."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Actualizaci\xf3n Autom\xe1tica"}),": No necesitas hacer \u201cpull\u201d de la informaci\xf3n; el servidor env\xeda la actualizaci\xf3n en cuanto ocurre el cambio."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"2-m\xe9todos-principales-para-la-escucha",children:["2. ",(0,a.jsx)(n.strong,{children:"M\xe9todos Principales para la Escucha"})]}),"\n",(0,a.jsxs)(n.p,{children:["Existen fundamentalmente dos enfoques para ",(0,a.jsx)(n.strong,{children:"escuchar"})," cambios en un nodo ",(0,a.jsx)(n.code,{children:"ValueEventListener"})," y ",(0,a.jsx)(n.code,{children:"ChildEventListener"}),":"]}),"\n",(0,a.jsx)(n.h3,{id:"valueeventlistener",children:(0,a.jsx)(n.code,{children:"ValueEventListener"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Notifica cada vez que ",(0,a.jsx)(n.strong,{children:"cualquier"})," dato del nodo cambia (o cualquiera de sus hijos)."]}),"\n",(0,a.jsxs)(n.li,{children:["Se dispara el evento ",(0,a.jsx)(n.code,{children:"onDataChange"})," con la ",(0,a.jsx)(n.strong,{children:"instant\xe1nea"})," (",(0,a.jsx)(n.em,{children:"snapshot"}),") completa del nodo."]}),"\n",(0,a.jsxs)(n.li,{children:["Se usa a menudo para mostrar una ",(0,a.jsx)(n.strong,{children:"lista"})," completa o el ",(0,a.jsx)(n.strong,{children:"estado"})," integral de ese nodo en la UI."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Ejemplo ValuesEventListener"',children:'DatabaseReference mDatabase = FirebaseDatabase.getInstance().getReference();\r\n\r\n// Ejemplo: escuchar todos los cambios en "anuncios"\r\nmDatabase.child("anuncios").addValueEventListener(new ValueEventListener() {\r\n    @Override\r\n    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n        // Este m\xe9todo se llama cada vez que se modifica algo en la rama "anuncios"\r\n        // o la primera vez que se crea la suscripci\xf3n.\r\n\r\n        // Podemos recorrer todos los hijos de "anuncios"\r\n        List<Anuncio> listaAnuncios = new ArrayList<>();\r\n        for (DataSnapshot ds : snapshot.getChildren()) {\r\n            Anuncio anuncio = ds.getValue(Anuncio.class);\r\n            if (anuncio != null) {\r\n                listaAnuncios.add(anuncio);\r\n            }\r\n        }\r\n        // Actualizar la UI con la listaAnuncios (por ejemplo, un RecyclerView)\r\n        Log.d("TiempoReal", "Total de anuncios: " + listaAnuncios.size());\r\n    }\r\n\r\n    @Override\r\n    public void onCancelled(@NonNull DatabaseError error) {\r\n        Log.e("TiempoReal", "Error al escuchar cambios en anuncios", error.toException());\r\n    }\r\n});\n'})}),"\n",(0,a.jsx)(n.admonition,{title:"explicaci\xf3n",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"onDataChange(...)"})}),": Se invoca la ",(0,a.jsx)(n.strong,{children:"primera vez"})," que se suscribe el listener y ",(0,a.jsx)(n.strong,{children:"cada vez"})," que algo en \u201canuncios\u201d (o sus subnodos) cambia."]}),"\n",(0,a.jsxs)(n.li,{children:["Recibes un ",(0,a.jsx)(n.strong,{children:"DataSnapshot"})," (",(0,a.jsx)(n.code,{children:"snapshot"}),") que representa el estado ",(0,a.jsx)(n.strong,{children:"completo"})," de \u201canuncios\u201d."]}),"\n"]})}),"\n",(0,a.jsx)(n.h3,{id:"childeventlistener",children:(0,a.jsx)(n.code,{children:"ChildEventListener"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Notifica ",(0,a.jsx)(n.strong,{children:"cambios individuales"})," en los hijos de un nodo (por ejemplo, un nuevo hijo a\xf1adido, un hijo modificado o eliminado)."]}),"\n",(0,a.jsxs)(n.li,{children:["Tiene m\xe9todos como ",(0,a.jsx)(n.code,{children:"onChildAdded"}),", ",(0,a.jsx)(n.code,{children:"onChildChanged"}),", ",(0,a.jsx)(n.code,{children:"onChildRemoved"}),", ",(0,a.jsx)(n.code,{children:"onChildMoved"})," y ",(0,a.jsx)(n.code,{children:"onCancelled"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Se usa a menudo cuando se necesita un control m\xe1s fino sobre ",(0,a.jsx)(n.strong,{children:"operaciones en cada hijo"})," (ideal para chats o listas donde a\xf1ades \xedtems uno a uno)."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:'title="Ejemplo ChildEventListener"',children:'mDatabase.child("mensajes").addChildEventListener(new ChildEventListener() {\r\n    @Override\r\n    public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n        // Se llama cuando se agrega un hijo nuevo a "mensajes"\r\n        Mensaje nuevo = snapshot.getValue(Mensaje.class);\r\n        Log.d("TiempoReal", "Se a\xf1adi\xf3 mensaje: " + (nuevo != null ? nuevo.getTexto() : ""));\r\n    }\r\n\r\n    @Override\r\n    public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n        // Se llama cuando cambia un hijo existente\r\n        Mensaje mensajeModificado = snapshot.getValue(Mensaje.class);\r\n        Log.d("TiempoReal", "Mensaje modificado: " + (mensajeModificado != null ? mensajeModificado.getTexto() : ""));\r\n    }\r\n\r\n    @Override\r\n    public void onChildRemoved(@NonNull DataSnapshot snapshot) {\r\n        // Se llama cuando se elimina un hijo\r\n        Mensaje mensajeEliminado = snapshot.getValue(Mensaje.class);\r\n        Log.d("TiempoReal", "Mensaje eliminado: " + (mensajeEliminado != null ? mensajeEliminado.getTexto() : ""));\r\n    }\r\n\r\n    @Override\r\n    public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n        // Se llama cuando cambia el orden de un hijo (generalmente al usar "orderBy...")\r\n        // No siempre se utiliza en todos los casos\r\n    }\r\n\r\n    @Override\r\n    public void onCancelled(@NonNull DatabaseError error) {\r\n        Log.e("TiempoReal", "Error en ChildEventListener", error.toException());\r\n    }\r\n});\n'})}),"\n",(0,a.jsx)(n.admonition,{title:"explicaci\xf3n",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"onChildAdded"})}),": Sucede la ",(0,a.jsx)(n.strong,{children:"primera vez"})," para todos los hijos existentes y ",(0,a.jsx)(n.strong,{children:"luego"})," cada vez que se a\xf1ade un nuevo hijo."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"onChildChanged"})}),": Cuando se modifica alguno de los hijos."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"onChildRemoved"})}),": Se llama si un hijo se elimina."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"onChildMoved"})}),": Se dispara si cambian las prioridades u orden de un hijo."]}),"\n"]})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Este listener es muy \xfatil para ",(0,a.jsx)(n.strong,{children:"chats"})," o ",(0,a.jsx)(n.strong,{children:"listas"})," que crecen de manera din\xe1mica, ya que te permite manejar cada ",(0,a.jsx)(n.strong,{children:"elemento"})," (hijo) por separado."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"3-ejemplo-lista-de-anuncios-en-tiempo-real",children:["3. ",(0,a.jsx)(n.strong,{children:"Ejemplo"}),": Lista de Anuncios en Tiempo Real"]}),"\n",(0,a.jsx)(n.p,{children:"Supongamos que deseas mostrar una lista de \u201canuncios\u201d en tu aplicaci\xf3n que se actualice autom\xe1ticamente cuando un usuario a\xf1ada, modifique o elimine un anuncio."}),"\n",(0,a.jsxs)(n.h3,{id:"modelo-de-datos",children:[(0,a.jsx)(n.strong,{children:"Modelo de Datos"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class Anuncio {\r\n    private String titulo;\r\n    private String mensaje;\r\n\r\n    public Anuncio() {} // Constructor vac\xedo para Firebase\r\n\r\n    public Anuncio(String titulo, String mensaje) {\r\n        this.titulo = titulo;\r\n        this.mensaje = mensaje;\r\n    }\r\n\r\n    public String getTitulo() {\r\n        return titulo;\r\n    }\r\n\r\n    public String getMensaje() {\r\n        return mensaje;\r\n    }\r\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"suscribirse-con-valueeventlistener",children:[(0,a.jsxs)(n.strong,{children:["Suscribirse con ",(0,a.jsx)(n.code,{children:"ValueEventListener"})]}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'DatabaseReference anunciosRef = FirebaseDatabase.getInstance().getReference().child("anuncios");\r\n\r\nanunciosRef.addValueEventListener(new ValueEventListener() {\r\n    @Override\r\n    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n        List<Anuncio> listaAnuncios = new ArrayList<>();\r\n        for (DataSnapshot ds : snapshot.getChildren()) {\r\n            Anuncio anuncio = ds.getValue(Anuncio.class);\r\n            if (anuncio != null) {\r\n                listaAnuncios.add(anuncio);\r\n            }\r\n        }\r\n        // Actualizar RecyclerView o ListView\r\n        Log.d("TiempoReal", "Anuncios actualizados. Total: " + listaAnuncios.size());\r\n    }\r\n\r\n    @Override\r\n    public void onCancelled(@NonNull DatabaseError error) {\r\n        Log.e("TiempoReal", "Error al leer anuncios en tiempo real", error.toException());\r\n    }\r\n});\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Con este m\xe9todo, ",(0,a.jsx)(n.strong,{children:"cada cambio"})," en cualquier anuncio disparar\xe1 ",(0,a.jsx)(n.code,{children:"onDataChange"}),", y podr\xe1s renovar la lista completa en la UI."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"4-suscribirse-y-desuscribirse",children:["4. ",(0,a.jsx)(n.strong,{children:"Suscribirse y Desuscribirse"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Suscribirse"}),": Se hace al llamar ",(0,a.jsx)(n.code,{children:"addValueEventListener(...)"})," o ",(0,a.jsx)(n.code,{children:"addChildEventListener(...)"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Desuscribirse"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A veces, es recomendable ",(0,a.jsx)(n.strong,{children:"eliminar"})," el listener en el m\xe9todo ",(0,a.jsx)(n.code,{children:"onStop()"})," o ",(0,a.jsx)(n.code,{children:"onDestroy()"})," del ",(0,a.jsx)(n.code,{children:"Activity/Fragment"})," para evitar fugas de memoria o actualizaciones innecesarias cuando la pantalla no est\xe9 visible."]}),"\n",(0,a.jsxs)(n.li,{children:["Se hace guardando la referencia del listener y llamando ",(0,a.jsx)(n.code,{children:"removeEventListener(listener)"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Ejemplo: almacenar el listener en una variable\r\nValueEventListener anunciosListener;\r\n\r\n@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    anunciosListener = anunciosRef.addValueEventListener(new ValueEventListener() { \r\n        ... \r\n    });\r\n}\r\n\r\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    if (anunciosListener != null) {\r\n        anunciosRef.removeEventListener(anunciosListener);\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"5-secuencia-de-observaci\xf3n-de-los-cambios-en-tiempo-real",children:["5. ",(0,a.jsx)(n.strong,{children:"Secuencia de observaci\xf3n de los Cambios en Tiempo Real"})]}),"\n",(0,a.jsx)("div",{style:{margin:"0 auto",width:"800px"},children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Diagrama de Secuencia",src:s(8887).A+"",title:"Diagrama de Secuencia",width:"1384",height:"1362"})})}),"\n",(0,a.jsx)(n.admonition,{title:"Explicaci\xf3n del diagrama:",type:"note",children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["La ",(0,a.jsx)(n.strong,{children:"app inicia"})," y obtiene la ",(0,a.jsx)(n.strong,{children:"referencia"})," al nodo (p.ej. ",(0,a.jsx)(n.code,{children:"anunciosRef"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["Llama a ",(0,a.jsx)(n.code,{children:"addValueEventListener(...)"})," o ",(0,a.jsx)(n.code,{children:"addChildEventListener(...)"})," para ",(0,a.jsx)(n.strong,{children:"suscribirse"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["La primera vez, se llama el ",(0,a.jsx)(n.strong,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"onDataChange"})," / ",(0,a.jsx)(n.code,{children:"onChildAdded"})," para cada hijo existente) y la UI se ",(0,a.jsx)(n.strong,{children:"inicializa"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Cuando se produce un ",(0,a.jsx)(n.strong,{children:"cambio"})," (cualquier usuario o proceso que escriba en ese nodo), Firebase ",(0,a.jsx)(n.strong,{children:"notifica"})," al listener."]}),"\n",(0,a.jsxs)(n.li,{children:["Se invoca el ",(0,a.jsx)(n.strong,{children:"callback"})," nuevamente y la UI se ",(0,a.jsx)(n.strong,{children:"actualiza"})," con los datos m\xe1s recientes."]}),"\n",(0,a.jsx)(n.li,{children:"El proceso se repite mientras la suscripci\xf3n est\xe9 activa."}),"\n"]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"buenas-pr\xe1cticas",children:(0,a.jsx)(n.strong,{children:"Buenas Pr\xe1cticas"})}),"\n",(0,a.jsx)(n.admonition,{title:"sigue estas pr\xe1cticas...",type:"tip",children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lecturas \xdanicas vs. Tiempo Real"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Si solo necesitas los datos una vez, usa ",(0,a.jsx)(n.code,{children:"addListenerForSingleValueEvent(...)"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Para actualizaciones continuas, elige ",(0,a.jsx)(n.code,{children:"addValueEventListener"})," o ",(0,a.jsx)(n.code,{children:"addChildEventListener"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Estructura de Datos"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Dise\xf1a tu \xe1rbol para evitar leer nodos gigantes cuando solo necesitas un subconjunto peque\xf1o de informaci\xf3n."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Remover Listeners"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Evita fugas de memoria o sobrecarga de datos quitando el listener cuando la UI ya no est\xe9 activa."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Errores"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Siempre maneja ",(0,a.jsx)(n.code,{children:"onCancelled(...)"})," para detectar problemas de conexi\xf3n o de permisos (reglas de seguridad)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Reglas de Seguridad"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Aseg\xfarate de que tus reglas en la consola de Firebase permitan a los usuarios leer lo que corresponde y nada m\xe1s."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,a.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}},8887:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/SecuenciaRealTime-8dfe9b61b16c7296a226b8a0600ab9ed.png"},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);