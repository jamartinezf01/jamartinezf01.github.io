"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[4459],{9756:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/operaciones CRUD","title":"Operaciones CRUD","description":"En esta secci\xf3n se explican de forma detallada las operaciones CRUD en Firebase Realtime Database usando Android (Java). Veremos c\xf3mo crear, leer, actualizar y eliminar datos en distintos escenarios, as\xed como buenas pr\xe1cticas en cada paso.","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/operaciones CRUD.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database","slug":"/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/operaciones CRUD","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/operaciones CRUD","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4}}');var i=a(4848),s=a(8453);const o={sidebar_position:4},c="Operaciones CRUD",l={},t=[{value:"1. <strong>Referencia Principal</strong>",id:"1-referencia-principal",level:2},{value:"2. <strong>Create</strong> (Crear)",id:"2-create-crear",level:2},{value:"Creaci\xf3n Directa con Clave Espec\xedfica",id:"creaci\xf3n-directa-con-clave-espec\xedfica",level:3},{value:"Creaci\xf3n con Clave Autom\xe1tica (<code>push()</code>)",id:"creaci\xf3n-con-clave-autom\xe1tica-push",level:3},{value:"3. <strong>Read</strong> (Leer)",id:"3-read-leer",level:2},{value:"Lectura Puntual: <code>addListenerForSingleValueEvent(...)</code>",id:"lectura-puntual-addlistenerforsinglevalueevent",level:3},{value:"Lectura en Tiempo Real: <code>addValueEventListener(...)</code>",id:"lectura-en-tiempo-real-addvalueeventlistener",level:3},{value:"4. <strong>Update</strong> (Actualizar)",id:"4-update-actualizar",level:2},{value:"Sobrescribir con <code>setValue()</code>",id:"sobrescribir-con-setvalue",level:3},{value:"Actualizaci\xf3n Parcial con <code>updateChildren()</code>",id:"actualizaci\xf3n-parcial-con-updatechildren",level:3},{value:"Transacciones y Concurrencia",id:"transacciones-y-concurrencia",level:3},{value:"5. <strong>Delete</strong> (Eliminar)",id:"5-delete-eliminar",level:2},{value:"Eliminar un Nodo Espec\xedfico",id:"eliminar-un-nodo-espec\xedfico",level:3},{value:"Eliminar M\xfaltiples Nodos",id:"eliminar-m\xfaltiples-nodos",level:3},{value:"<strong>Esquema Resumen</strong>",id:"esquema-resumen",level:2},{value:"<strong>Buenas Pr\xe1cticas en CRUD</strong>",id:"buenas-pr\xe1cticas-en-crud",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"operaciones-crud",children:"Operaciones CRUD"})}),"\n",(0,i.jsxs)(n.p,{children:["En esta secci\xf3n se explican de forma detallada las ",(0,i.jsx)(n.strong,{children:"operaciones CRUD"})," en Firebase Realtime Database usando Android (Java). Veremos c\xf3mo ",(0,i.jsx)(n.strong,{children:"crear"}),", ",(0,i.jsx)(n.strong,{children:"leer"}),", ",(0,i.jsx)(n.strong,{children:"actualizar"})," y ",(0,i.jsx)(n.strong,{children:"eliminar"})," datos en distintos escenarios, as\xed como buenas pr\xe1cticas en cada paso."]}),"\n",(0,i.jsxs)(n.h2,{id:"1-referencia-principal",children:["1. ",(0,i.jsx)(n.strong,{children:"Referencia Principal"})]}),"\n",(0,i.jsxs)(n.p,{children:["En Firebase Realtime Database, la ",(0,i.jsx)(n.strong,{children:"Referencia Principal"})," (a menudo vista en c\xf3digo como mDatabase) es el punto de entrada para interactuar con tu base de datos. A partir de esa referencia, puedes navegar a cualquier nodo (o rama) del \xe1rbol JSON de tu base de datos."]}),"\n",(0,i.jsx)(n.p,{children:"La referencia principal hace referencia a la ra\xedz de la base de datos; es decir, el nivel superior del \xe1rbol de datos en Realtime Database. Se obtiene generalmente as\xed:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Referencia principal"}),": Una instancia de la base de datos a trav\xe9s de:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"DatabaseReference mDatabase = FirebaseDatabase.getInstance().getReference();\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FirebaseDatabase.getInstance()"})," obtiene la instancia de FirebaseDatabase configurada para tu proyecto (basado en el google-services.json que incluiste)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getReference()"})," devuelve la referencia a la ra\xedz de tu base de datos, tambi\xe9n conocida como root."]}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"2-create-crear",children:["2. ",(0,i.jsx)(n.strong,{children:"Create"})," (Crear)"]}),"\n",(0,i.jsx)(n.p,{children:"Para crear datos en Firebase Realtime Database, se pueden usar principalmente dos m\xe9todos:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"setValue()"})}),": Sobrescribe completamente un nodo."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"push()"})}),": Genera una ",(0,i.jsx)(n.strong,{children:"clave \xfanica"})," basada en una marca de tiempo y un identificador aleatorio, ideal para listas (por ejemplo, \u201cmensajes\u201d, \u201canuncios\u201d, etc.)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"creaci\xf3n-directa-con-clave-espec\xedfica",children:"Creaci\xf3n Directa con Clave Espec\xedfica"}),"\n",(0,i.jsxs)(n.p,{children:["Si ya tienes un identificador (por ejemplo, el UID de un usuario) y deseas guardar datos en la ruta ",(0,i.jsx)(n.code,{children:"usuarios/<uid>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void crearUsuarioConClave(String uid, String nombre, String email) {\r\n    Usuario usuario = new Usuario(nombre, email);\r\n    mDatabase.child("usuarios").child(uid).setValue(usuario)\r\n        .addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                Log.d("Create", "Usuario creado con \xe9xito");\r\n            } else {\r\n                Log.e("Create", "Error al crear usuario", task.getException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Explicaci\xf3n",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'mDatabase.child("usuarios").child(uid)'})," apunta al nodo ",(0,i.jsx)(n.code,{children:"usuarios/uid"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setValue(usuario)"})," crea (o sobrescribe) todo el nodo con la informaci\xf3n de ",(0,i.jsx)(n.code,{children:"usuario"}),"."]}),"\n"]})}),"\n",(0,i.jsx)(n.admonition,{title:"ventajas y desventajas",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ventaja: Controlas exactamente d\xf3nde se guardan los datos (por ejemplo, usuarios/uid)."}),"\n",(0,i.jsx)(n.li,{children:"Desventaja: Necesitas tener un ID \xfanico ya existente"}),"\n"]})}),"\n",(0,i.jsxs)(n.h3,{id:"creaci\xf3n-con-clave-autom\xe1tica-push",children:["Creaci\xf3n con Clave Autom\xe1tica (",(0,i.jsx)(n.code,{children:"push()"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Cuando no necesitas un identificador espec\xedfico o cuando deseas guardar m\xfaltiples elementos como en una \u201clista\u201d, se recomienda ",(0,i.jsx)(n.code,{children:"push()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void crearAnuncio(String titulo, String mensaje) {\r\n    Anuncio anuncio = new Anuncio(titulo, mensaje);\r\n    // Generamos una clave autom\xe1tica en la rama "anuncios"\r\n    String key = mDatabase.child("anuncios").push().getKey();\r\n    \r\n    if (key != null) {\r\n        mDatabase.child("anuncios").child(key).setValue(anuncio)\r\n            .addOnCompleteListener(task -> {\r\n                if (task.isSuccessful()) {\r\n                    Log.d("Create", "Anuncio creado con \xe9xito");\r\n                } else {\r\n                    Log.e("Create", "Error al crear anuncio", task.getException());\r\n                }\r\n            });\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Explicaci\xf3n",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"push()"})," crea un nodo con un ",(0,i.jsx)(n.strong,{children:"ID \xfanico"})," que se compone de la fecha y un componente aleatorio (por ejemplo: ",(0,i.jsx)(n.code,{children:"-Mxyz12345abc"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Es ideal para datos que se almacenan en formato de ",(0,i.jsx)(n.strong,{children:"lista"})," (chats, publicaciones, comentarios, etc.)."]}),"\n"]})}),"\n",(0,i.jsx)(n.admonition,{title:"ventajas y desventajas",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ventaja: Perfecto para crear nodos en forma de lista sin preocuparte por colisiones de IDs."}),"\n",(0,i.jsx)(n.li,{children:"Desventaja: No controlas directamente el ID. Aunque, en la mayor\xeda de casos, \xa1eso es lo que se quiere!"}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"3-read-leer",children:["3. ",(0,i.jsx)(n.strong,{children:"Read"})," (Leer)"]}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"lectura"})," puede hacerse de dos maneras principales:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lectura puntual (Single Read)"}),": Se utiliza normalmente para cargar datos una sola vez, sin escuchar cambios futuros."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lectura en tiempo real (Realtime Listener)"}),": Se suscribe a cambios en la base de datos; cada vez que el nodo cambia, se obtiene una actualizaci\xf3n inmediata."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"lectura-puntual-addlistenerforsinglevalueevent",children:["Lectura Puntual: ",(0,i.jsx)(n.code,{children:"addListenerForSingleValueEvent(...)"})]}),"\n",(0,i.jsx)(n.p,{children:"Se llama una sola vez cuando se obtienen los datos, y luego se detiene:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void leerUsuarioUnaVez(String uid) {\r\n    mDatabase.child("usuarios").child(uid)\r\n        .addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                // Este m\xe9todo se llama cuando se obtienen los datos por primera vez\r\n                Usuario usuario = dataSnapshot.getValue(Usuario.class);\r\n                if (usuario != null) {\r\n                    Log.d("Read", "Nombre: " + usuario.getNombre() + \r\n                                  ", Email: " + usuario.getEmail());\r\n                } else {\r\n                    Log.d("Read", "No existe el usuario con UID: " + uid);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e("Read", "Error al leer datos", error.toException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"lectura-en-tiempo-real-addvalueeventlistener",children:["Lectura en Tiempo Real: ",(0,i.jsx)(n.code,{children:"addValueEventListener(...)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Permite suscribirse de forma permanente a los cambios de un nodo. Cualquier cambio (adici\xf3n, modificaci\xf3n o eliminaci\xf3n) en dicho nodo dispara nuevamente el callback ",(0,i.jsx)(n.code,{children:"onDataChange"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void suscribirseAAnuncios() {\r\n    mDatabase.child("anuncios").addValueEventListener(new ValueEventListener() {\r\n        @Override\r\n        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n            // Este m\xe9todo se llamar\xe1 cada vez que haya cambios en "anuncios"\r\n            List<Anuncio> listaAnuncios = new ArrayList<>();\r\n            for (DataSnapshot ds : snapshot.getChildren()) {\r\n                Anuncio anuncio = ds.getValue(Anuncio.class);\r\n                if (anuncio != null) {\r\n                    listaAnuncios.add(anuncio);\r\n                }\r\n            }\r\n            // Aqu\xed actualizas tu UI con la listaAnuncios reci\xe9n obtenida\r\n            Log.d("Read", "Anuncios actualizados: " + listaAnuncios.size());\r\n        }\r\n\r\n        @Override\r\n        public void onCancelled(@NonNull DatabaseError error) {\r\n            Log.e("Read", "Error en la lectura de anuncios", error.toException());\r\n        }\r\n    });\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"explicaci\xf3n",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onDataChange()"})," se ejecuta tanto cuando se a\xf1ade un nuevo anuncio como cuando cambia o se elimina uno."]}),"\n",(0,i.jsxs)(n.li,{children:["Si solo requieres un evento por cada ",(0,i.jsx)(n.strong,{children:"hijo"})," que se a\xf1ada o se cambie, puedes usar ",(0,i.jsx)(n.code,{children:"ChildEventListener"}),", aunque en muchos casos ",(0,i.jsx)(n.code,{children:"ValueEventListener"})," basta."]}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"4-update-actualizar",children:["4. ",(0,i.jsx)(n.strong,{children:"Update"})," (Actualizar)"]}),"\n",(0,i.jsxs)(n.p,{children:["Para ",(0,i.jsx)(n.strong,{children:"modificar datos"})," en Realtime Database existen dos m\xe9todos principales:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"setValue()"})}),": Si ya se tiene la referencia exacta de un nodo. Reemplaza todo el nodo (sobrescribe) con la nueva informaci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"updateChildren()"})}),": Permite actualizar ",(0,i.jsx)(n.strong,{children:"parcialmente"})," m\xfaltiples campos o nodos simult\xe1neamente (muy \xfatil si no quieres sobrescribir todo)."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"sobrescribir-con-setvalue",children:["Sobrescribir con ",(0,i.jsx)(n.code,{children:"setValue()"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void actualizarUsuarioCompleto(String uid, Usuario usuarioActualizado) {\r\n    mDatabase.child("usuarios").child(uid).setValue(usuarioActualizado)\r\n        .addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                Log.d("Update", "Usuario sobrescrito con \xe9xito");\r\n            } else {\r\n                Log.e("Update", "Error al sobrescribir usuario", task.getException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["En este caso, si el nodo ",(0,i.jsx)(n.code,{children:"usuarios/<uid>"})," ten\xeda m\xe1s propiedades de las que tiene ",(0,i.jsx)(n.code,{children:"Usuario"}),", se ",(0,i.jsx)(n.strong,{children:"perder\xe1n"})," al sobrescribir."]})}),"\n",(0,i.jsxs)(n.h3,{id:"actualizaci\xf3n-parcial-con-updatechildren",children:["Actualizaci\xf3n Parcial con ",(0,i.jsx)(n.code,{children:"updateChildren()"})]}),"\n",(0,i.jsxs)(n.p,{children:["Es especialmente \xfatil cuando solo deseas modificar algunos campos sin perder informaci\xf3n existente. Se emplea un ",(0,i.jsx)(n.code,{children:"Map<String, Object>"})," con los campos a actualizar:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void actualizarCampoUsuario(String uid, String nuevoNombre) {\r\n    Map<String, Object> actualizaciones = new HashMap<>();\r\n    actualizaciones.put("nombre", nuevoNombre);\r\n\r\n    // Tambi\xe9n podr\xedas actualizar m\xe1s campos: actualizaciones.put("email", "otro@example.com");\r\n\r\n    mDatabase.child("usuarios").child(uid).updateChildren(actualizaciones)\r\n        .addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                Log.d("Update", "Usuario actualizado parcialmente");\r\n            } else {\r\n                Log.e("Update", "Error al actualizar usuario", task.getException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"explicaci\xf3n",type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"updateChildren()"})," aplica solo los cambios especificados y mantiene intactos los dem\xe1s campos."]})}),"\n",(0,i.jsx)(n.h3,{id:"transacciones-y-concurrencia",children:"Transacciones y Concurrencia"}),"\n",(0,i.jsxs)(n.p,{children:["Cuando varios usuarios pueden escribir ",(0,i.jsx)(n.strong,{children:"simult\xe1neamente"})," en un mismo nodo y necesitas ",(0,i.jsx)(n.strong,{children:"consistencia"})," (por ejemplo, contadores o \u201clikes\u201d), conviene usar ",(0,i.jsx)(n.strong,{children:"transacciones"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void incrementarContadorAnuncio(String anuncioId) {\r\n    mDatabase.child("anuncios").child(anuncioId).child("contadorVisitas")\r\n        .runTransaction(new Transaction.Handler() {\r\n            @NonNull\r\n            @Override\r\n            public Transaction.Result doTransaction(@NonNull MutableData currentData) {\r\n                Integer valorActual = currentData.getValue(Integer.class);\r\n                if (valorActual == null) {\r\n                    currentData.setValue(1);\r\n                } else {\r\n                    currentData.setValue(valorActual + 1);\r\n                }\r\n                return Transaction.success(currentData);\r\n            }\r\n\r\n            @Override\r\n            public void onComplete(@Nullable DatabaseError error, boolean committed,\r\n                                   @Nullable DataSnapshot currentData) {\r\n                if (error != null) {\r\n                    Log.e("Transaction", "Error al actualizar visitas", error.toException());\r\n                } else {\r\n                    Log.d("Transaction", "Contador de visitas actualizado");\r\n                }\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"explicaci\xf3n",type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"runTransaction(...)"})," garantiza que si el valor ha cambiado mientras un usuario escrib\xeda, se reintente la operaci\xf3n con el valor actualizado, evitando sobreescrituras no deseadas."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"5-delete-eliminar",children:["5. ",(0,i.jsx)(n.strong,{children:"Delete"})," (Eliminar)"]}),"\n",(0,i.jsxs)(n.p,{children:["Para borrar datos de la base de datos, se usa ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"removeValue()"})})," sobre la referencia al nodo que deseas eliminar."]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-un-nodo-espec\xedfico",children:"Eliminar un Nodo Espec\xedfico"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void eliminarUsuario(String uid) {\r\n    mDatabase.child("usuarios").child(uid).removeValue()\r\n        .addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                Log.d("Delete", "Usuario eliminado");\r\n            } else {\r\n                Log.e("Delete", "Error al eliminar usuario", task.getException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Si ",(0,i.jsx)(n.code,{children:"usuarios/uid"})," no existe, no ocurre nada; no es un error, simplemente no hay nada que eliminar."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-m\xfaltiples-nodos",children:"Eliminar M\xfaltiples Nodos"}),"\n",(0,i.jsxs)(n.p,{children:["Si quieres eliminar varios nodos a la vez, puedes usar ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"updateChildren()"})})," con ",(0,i.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'private void eliminarVariosUsuarios(List<String> uids) {\r\n    Map<String, Object> updates = new HashMap<>();\r\n    for (String uid : uids) {\r\n        // Al establecer el valor a null, se elimina esa ruta\r\n        updates.put("/usuarios/" + uid, null);\r\n    }\r\n    mDatabase.updateChildren(updates)\r\n        .addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                Log.d("Delete", "Usuarios eliminados correctamente");\r\n            } else {\r\n                Log.e("Delete", "Error al eliminar usuarios", task.getException());\r\n            }\r\n        });\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"esquema-resumen",children:(0,i.jsx)(n.strong,{children:"Esquema Resumen"})}),"\n",(0,i.jsx)("div",{style:{margin:"0 auto",width:"1000px"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"mapa mental CRUD",src:a(1227).A+"",title:"mapa mental CRUD",width:"1384",height:"566"})})}),"\n",(0,i.jsx)(n.h2,{id:"buenas-pr\xe1cticas-en-crud",children:(0,i.jsx)(n.strong,{children:"Buenas Pr\xe1cticas en CRUD"})}),"\n",(0,i.jsx)(n.admonition,{title:"Sigue estas pr\xe1cticas",type:"tip",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dise\xf1a la Estructura de Datos"})," para facilitar las operaciones:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Evita anidar demasiados niveles."}),"\n",(0,i.jsx)(n.li,{children:"Piensa en la distribuci\xf3n de datos para minimizar lecturas innecesarias."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reglas de Seguridad"}),": Aseg\xfarate de configurar reglas adecuadas para que solo los usuarios o roles deseados puedan crear, leer, actualizar o eliminar datos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validaci\xf3n"}),": Emplea ",(0,i.jsx)(n.code,{children:"updateChildren()"})," para cambios parciales y evita sobrescribir informaci\xf3n relevante accidentalmente."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transacciones"}),": Son imprescindibles cuando necesitas consistencia en operaciones concurrentes (ej. contadores, votos, inventarios)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manejo de Errores"}),": Siempre revisa ",(0,i.jsx)(n.code,{children:"onCompleteListener"}),", ",(0,i.jsx)(n.code,{children:"onDataChange"})," y ",(0,i.jsx)(n.code,{children:"onCancelled"})," para notificar al usuario o registrar logs en caso de falla."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Uso de Listeners"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Para cargas \xfanicas, usa ",(0,i.jsx)(n.code,{children:"addListenerForSingleValueEvent"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Para datos en tiempo real, ",(0,i.jsx)(n.code,{children:"addValueEventListener"})," o ",(0,i.jsx)(n.code,{children:"ChildEventListener"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance y Costos"}),": Evita leer grandes ramas de la base de datos innecesariamente. Aplica consultas y paginaci\xf3n si es preciso (usando ",(0,i.jsx)(n.code,{children:"orderByChild"}),", ",(0,i.jsx)(n.code,{children:"startAt"}),", ",(0,i.jsx)(n.code,{children:"limitToFirst"}),", etc.)."]}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1227:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/esquemaCRUD-94a370a57e41dfacc5318a04b9f3d1a6.png"},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var r=a(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);