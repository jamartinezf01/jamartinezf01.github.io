"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[7265],{1536:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Firestore/operaciones CRUD","title":"Operaciones CRUD","description":"Una de las caracter\xedsticas m\xe1s importantes de Firestore es su capacidad para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) de manera eficiente y escalable. Estas operaciones permiten gestionar los datos dentro de la base de datos y son esenciales para cualquier aplicaci\xf3n que requiera almacenamiento persistente.Estas operaciones nos permitir\xe1n...","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Firestore/operaciones CRUD.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Firestore","slug":"/aplicaciones m\xf3viles/5 Persistencia/FireBase/Firestore/operaciones CRUD","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Firestore/operaciones CRUD","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4}}');var i=o(4848),s=o(8453);const c={sidebar_position:4},a="Operaciones CRUD",l={},t=[{value:"1. <strong>Crear documentos en Firestore</strong>",id:"1-crear-documentos-en-firestore",level:2},{value:"Crear un documento con un ID autom\xe1tico",id:"crear-un-documento-con-un-id-autom\xe1tico",level:3},{value:"Crear un documento con un ID definido manualmente",id:"crear-un-documento-con-un-id-definido-manualmente",level:3},{value:"Prevenir sobrescritura",id:"prevenir-sobrescritura",level:3},{value:"Crear documentos dentro de una subcolecci\xf3n",id:"crear-documentos-dentro-de-una-subcolecci\xf3n",level:3},{value:"2. <strong>Leer documentos en Firestore</strong>",id:"2-leer-documentos-en-firestore",level:2},{value:"Leer un documento por su ID",id:"leer-un-documento-por-su-id",level:3},{value:"Leer todos los documentos de una colecci\xf3n",id:"leer-todos-los-documentos-de-una-colecci\xf3n",level:3},{value:"Leer un documento dentro de una subcolecci\xf3n",id:"leer-un-documento-dentro-de-una-subcolecci\xf3n",level:3},{value:"Filtrar documentos con consultas",id:"filtrar-documentos-con-consultas",level:3},{value:"Escuchar cambios en tiempo real",id:"escuchar-cambios-en-tiempo-real",level:3},{value:"3. <strong>Actualizar documentos en Firestore</strong>",id:"3-actualizar-documentos-en-firestore",level:2},{value:"Sobrescribir un documento completamente (<code>set()</code>)",id:"sobrescribir-un-documento-completamente-set",level:3},{value:"Actualizar solo campos espec\xedficos (<code>update()</code>)",id:"actualizar-solo-campos-espec\xedficos-update",level:3},{value:"A\xf1adir nuevos campos sin sobrescribir (<code>set()</code> con <code>merge()</code>)",id:"a\xf1adir-nuevos-campos-sin-sobrescribir-set-con-merge",level:3},{value:"Incrementar valores num\xe9ricos (<code>FieldValue.increment()</code>)",id:"incrementar-valores-num\xe9ricos-fieldvalueincrement",level:3},{value:"Actualizar arrays (<code>FieldValue.arrayUnion()</code> y <code>FieldValue.arrayRemove()</code>)",id:"actualizar-arrays-fieldvaluearrayunion-y-fieldvaluearrayremove",level:3},{value:"4. <strong>Eliminar documentos</strong>",id:"4-eliminar-documentos",level:2},{value:"Eliminar un documento completo",id:"eliminar-un-documento-completo",level:3},{value:"Eliminar un campo dentro de un documento",id:"eliminar-un-campo-dentro-de-un-documento",level:3},{value:"Eliminar todos los documentos de una colecci\xf3n",id:"eliminar-todos-los-documentos-de-una-colecci\xf3n",level:3},{value:"Eliminar un documento y todas sus subcolecciones",id:"eliminar-un-documento-y-todas-sus-subcolecciones",level:3}];function d(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"operaciones-crud",children:"Operaciones CRUD"})}),"\n",(0,i.jsxs)(n.p,{children:["Una de las caracter\xedsticas m\xe1s importantes de Firestore es su capacidad para realizar operaciones ",(0,i.jsx)(n.strong,{children:"CRUD"})," (Crear, Leer, Actualizar y Eliminar) de manera eficiente y escalable. Estas operaciones permiten gestionar los datos dentro de la base de datos y son esenciales para cualquier aplicaci\xf3n que requiera almacenamiento persistente.Estas operaciones nos permitir\xe1n..."]}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Crear"})," documentos en colecciones, con y sin ID autom\xe1tico.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Leer"})," documentos individuales y colecciones completas.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Actualizar"})," datos espec\xedficos sin sobrescribir el documento completo.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Eliminar"})," documentos o campos espec\xedficos de la base de datos."]}),"\n",(0,i.jsx)(n.p,{children:"Estas operaciones se ejecutan de forma as\xedncrona y permiten interactuar con Firestore de manera eficiente, aprovechando su sistema de indexaci\xf3n y sincronizaci\xf3n en tiempo real."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"1-crear-documentos-en-firestore",children:["1. ",(0,i.jsx)(n.strong,{children:"Crear documentos en Firestore"})]}),"\n",(0,i.jsxs)(n.p,{children:["En Firestore, los datos se organizan en ",(0,i.jsx)(n.strong,{children:"colecciones"}),", y dentro de estas colecciones, cada documento representa una entidad con informaci\xf3n estructurada en forma de pares ",(0,i.jsx)(n.strong,{children:"clave-valor"})," (similar a un objeto JSON). Un documento ",(0,i.jsx)(n.strong,{children:"no puede contener otros documentos"}),", pero puede referenciar ",(0,i.jsx)(n.strong,{children:"subcolecciones"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"crear-un-documento-con-un-id-autom\xe1tico",children:"Crear un documento con un ID autom\xe1tico"}),"\n",(0,i.jsx)(n.p,{children:"Cuando agregamos un documento sin especificar un ID, Firestore genera un identificador \xfanico aleatorio. Esto es \xfatil cuando no necesitamos un control estricto sobre los identificadores."}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo..."})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Instancia de Firestore\r\nFirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n// Crear un mapa con los datos del documento\r\nMap<String, Object> pelicula = new HashMap<>();\r\npelicula.put("titulo", "Inception");\r\npelicula.put("director", "Christopher Nolan");\r\npelicula.put("a\xf1o", 2010);\r\npelicula.put("genero", "Ciencia Ficci\xf3n");\r\n\r\n// Agregar el documento a la colecci\xf3n "peliculas"\r\ndb.collection("peliculas")\r\n    .add(pelicula)\r\n    .addOnSuccessListener(documentReference -> {\r\n        Log.d("Firestore", "Documento agregado con ID: " + documentReference.getId());\r\n    })\r\n    .addOnFailureListener(e -> {\r\n        Log.w("Firestore", "Error al agregar documento", e);\r\n    });\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se obtiene una instancia de ",(0,i.jsx)(n.strong,{children:"FirebaseFirestore"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Se crea un ",(0,i.jsx)(n.code,{children:"Map<String, Object>"})," con los datos de la pel\xedcula."]}),"\n",(0,i.jsxs)(n.li,{children:["Se usa ",(0,i.jsx)(n.code,{children:".add(pelicula)"})," para insertar el documento en la colecci\xf3n ",(0,i.jsx)(n.strong,{children:'"peliculas"'}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Firestore genera un ID \xfanico autom\xe1ticamente."}),"\n",(0,i.jsx)(n.li,{children:"Si la operaci\xf3n es exitosa, el ID del documento se muestra en el log."}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"crear-un-documento-con-un-id-definido-manualmente",children:"Crear un documento con un ID definido manualmente"}),"\n",(0,i.jsxs)(n.p,{children:["Si queremos que nuestro documento tenga un identificador espec\xedfico (por ejemplo, un nombre legible o un ID basado en una clave primaria), podemos usar ",(0,i.jsx)(n.code,{children:"document(ID).set(datos)"})," en lugar de ",(0,i.jsx)(n.code,{children:"add()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Instancia de Firestore\r\nFirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n// Crear los datos de la pel\xedcula\r\nMap<String, Object> pelicula = new HashMap<>();\r\npelicula.put("titulo", "Interstellar");\r\npelicula.put("director", "Christopher Nolan");\r\npelicula.put("a\xf1o", 2014);\r\npelicula.put("genero", "Ciencia Ficci\xf3n");\r\n\r\n// Guardar el documento con un ID espec\xedfico\r\ndb.collection("peliculas")\r\n    .document("interstellar") // ID definido manualmente\r\n    .set(pelicula)\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Documento creado con ID espec\xedfico"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al crear documento", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se usa ",(0,i.jsx)(n.code,{children:'.document("interstellar")'})," para definir el ID del documento."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".set(pelicula)"})," guarda los datos en Firestore bajo el ID ",(0,i.jsx)(n.strong,{children:'"interstellar"'}),"."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Ventajas de usar un ID manual"})}),(0,i.jsxs)(n.p,{children:["\u2714\ufe0f Facilita la b\xfasqueda directa si el ID es significativo.",(0,i.jsx)(n.br,{}),"\n","\u2714\ufe0f Evita duplicados si usamos una clave \xfanica (por ejemplo, un email o un c\xf3digo).",(0,i.jsx)(n.br,{}),"\n","\u2714\ufe0f Permite una mejor organizaci\xf3n en bases de datos estructuradas."]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Precauci\xf3n",type:"warning",children:(0,i.jsxs)(n.p,{children:["Si el documento ya existe con el mismo ID, se ",(0,i.jsx)(n.strong,{children:"sobrescribir\xe1"})," al usar ",(0,i.jsx)(n.code,{children:"set()"}),". Para evitarlo, debemos manejar los conflictos adecuadamente."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"prevenir-sobrescritura",children:"Prevenir sobrescritura"}),"\n",(0,i.jsxs)(n.p,{children:["Si queremos que Firestore solo cree el documento si ",(0,i.jsx)(n.strong,{children:"no existe previamente"}),", podemos usar ",(0,i.jsx)(n.code,{children:".set()"})," con ",(0,i.jsx)(n.code,{children:"SetOptions.merge()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.google.firebase.firestore.SetOptions;\r\n\r\n// Instancia de Firestore\r\nFirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n// Datos de la pel\xedcula\r\nMap<String, Object> pelicula = new HashMap<>();\r\npelicula.put("titulo", "Tenet");\r\npelicula.put("director", "Christopher Nolan");\r\npelicula.put("a\xf1o", 2020);\r\npelicula.put("genero", "Ciencia Ficci\xf3n");\r\n\r\n// Agregar documento sin sobrescribir datos existentes\r\ndb.collection("peliculas")\r\n    .document("tenet")\r\n    .set(pelicula, SetOptions.merge()) // Evita sobrescribir campos existentes\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Documento actualizado sin sobrescribir"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al actualizar documento", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SetOptions.merge()"})," evita que los campos existentes en el documento se borren. Solo se actualizan o agregan los nuevos."]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"crear-documentos-dentro-de-una-subcolecci\xf3n",children:"Crear documentos dentro de una subcolecci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Los documentos no pueden contener otros documentos directamente, pero s\xed pueden tener ",(0,i.jsx)(n.strong,{children:"subcolecciones"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Datos de una rese\xf1a dentro de la subcolecci\xf3n "rese\xf1as"\r\nMap<String, Object> rese\xf1a = new HashMap<>();\r\nrese\xf1a.put("usuario", "Juan P\xe9rez");\r\nrese\xf1a.put("comentario", "Excelente pel\xedcula");\r\nrese\xf1a.put("puntuacion", 5);\r\n\r\n// Agregar una rese\xf1a a la pel\xedcula "inception"\r\ndb.collection("peliculas")\r\n    .document("inception")\r\n    .collection("rese\xf1as")  // Subcolecci\xf3n\r\n    .add(rese\xf1a)\r\n    .addOnSuccessListener(documentReference -> {\r\n        Log.d("Firestore", "Rese\xf1a agregada con ID: " + documentReference.getId());\r\n    })\r\n    .addOnFailureListener(e -> {\r\n        Log.w("Firestore", "Error al agregar rese\xf1a", e);\r\n    });\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"2-leer-documentos-en-firestore",children:["2. ",(0,i.jsx)(n.strong,{children:"Leer documentos en Firestore"})]}),"\n",(0,i.jsxs)(n.p,{children:["Firestore permite leer datos almacenados en ",(0,i.jsx)(n.strong,{children:"documentos individuales"})," o ",(0,i.jsx)(n.strong,{children:"colecciones completas"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"leer-un-documento-por-su-id",children:"Leer un documento por su ID"}),"\n",(0,i.jsxs)(n.p,{children:["Si conocemos el ",(0,i.jsx)(n.strong,{children:"ID de un documento"}),", podemos obtenerlo directamente usando ",(0,i.jsx)(n.code,{children:"get()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Instancia de Firestore\r\nFirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n// Obtener el documento con ID "inception" en la colecci\xf3n "peliculas"\r\ndb.collection("peliculas").document("inception")\r\n    .get()\r\n    .addOnSuccessListener(documentSnapshot -> {\r\n        if (documentSnapshot.exists()) {\r\n            String titulo = documentSnapshot.getString("titulo");\r\n            String director = documentSnapshot.getString("director");\r\n            Long a\xf1o = documentSnapshot.getLong("a\xf1o");\r\n\r\n            Log.d("Firestore", "T\xedtulo: " + titulo + ", Director: " + director + ", A\xf1o: " + a\xf1o);\r\n        } else {\r\n            Log.d("Firestore", "El documento no existe");\r\n        }\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al obtener documento", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se usa ",(0,i.jsx)(n.code,{children:'.document("inception")'})," para acceder al documento con ese ID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".get()"})," recupera los datos almacenados."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'documentSnapshot.getString("titulo")'})," obtiene valores de los campos."]}),"\n",(0,i.jsxs)(n.li,{children:["Se verifica si el documento ",(0,i.jsx)(n.strong,{children:"existe"})," antes de acceder a sus datos."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"leer-todos-los-documentos-de-una-colecci\xf3n",children:"Leer todos los documentos de una colecci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Para obtener ",(0,i.jsx)(n.strong,{children:"todos los documentos"})," de una colecci\xf3n, usamos ",(0,i.jsx)(n.code,{children:"get()"})," sobre la colecci\xf3n."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas")\r\n    .get()\r\n    .addOnSuccessListener(queryDocumentSnapshots -> {\r\n        for (DocumentSnapshot document : queryDocumentSnapshots) {\r\n            String titulo = document.getString("titulo");\r\n            String director = document.getString("director");\r\n            Long a\xf1o = document.getLong("a\xf1o");\r\n\r\n            Log.d("Firestore", "T\xedtulo: " + titulo + ", Director: " + director + ", A\xf1o: " + a\xf1o);\r\n        }\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al obtener documentos", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'.collection("peliculas").get()'})," obtiene todos los documentos de la colecci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:["Se itera sobre cada ",(0,i.jsx)(n.code,{children:"DocumentSnapshot"})," para extraer los datos."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"leer-un-documento-dentro-de-una-subcolecci\xf3n",children:"Leer un documento dentro de una subcolecci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Si un documento tiene una ",(0,i.jsx)(n.strong,{children:"subcolecci\xf3n"}),", podemos acceder a ella con ",(0,i.jsx)(n.code,{children:"collection()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception").collection("rese\xf1as")\r\n    .get()\r\n    .addOnSuccessListener(queryDocumentSnapshots -> {\r\n        for (DocumentSnapshot document : queryDocumentSnapshots) {\r\n            String usuario = document.getString("usuario");\r\n            String comentario = document.getString("comentario");\r\n            Long puntuacion = document.getLong("puntuacion");\r\n\r\n            Log.d("Firestore", "Usuario: " + usuario + ", Comentario: " + comentario + ", Puntuaci\xf3n: " + puntuacion);\r\n        }\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al obtener rese\xf1as", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'document("inception").collection("rese\xf1as")'}),' accede a la subcolecci\xf3n "rese\xf1as".']}),"\n",(0,i.jsx)(n.li,{children:"Se itera sobre los documentos dentro de la subcolecci\xf3n."}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"filtrar-documentos-con-consultas",children:"Filtrar documentos con consultas"}),"\n",(0,i.jsxs)(n.p,{children:["Firestore permite aplicar ",(0,i.jsx)(n.strong,{children:"filtros"})," con ",(0,i.jsx)(n.code,{children:"whereEqualTo()"}),", ",(0,i.jsx)(n.code,{children:"whereGreaterThan()"}),", etc."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo: Obtener pel\xedculas de un g\xe9nero espec\xedfico"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas")\r\n    .whereEqualTo("genero", "Ciencia Ficci\xf3n")\r\n    .get()\r\n    .addOnSuccessListener(queryDocumentSnapshots -> {\r\n        for (DocumentSnapshot document : queryDocumentSnapshots) {\r\n            Log.d("Firestore", "Pel\xedcula: " + document.getString("titulo"));\r\n        }\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al filtrar documentos", e));\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo: Obtener pel\xedculas estrenadas despu\xe9s del 2010"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas")\r\n    .whereGreaterThan("a\xf1o", 2010)\r\n    .get()\r\n    .addOnSuccessListener(queryDocumentSnapshots -> {\r\n        for (DocumentSnapshot document : queryDocumentSnapshots) {\r\n            Log.d("Firestore", "Pel\xedcula: " + document.getString("titulo") + ", A\xf1o: " + document.getLong("a\xf1o"));\r\n        }\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error en la consulta", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'whereEqualTo("genero", "Ciencia Ficci\xf3n")'})," filtra solo pel\xedculas de ese g\xe9nero."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'whereGreaterThan("a\xf1o", 2010)'})," obtiene pel\xedculas estrenadas despu\xe9s de 2010."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"escuchar-cambios-en-tiempo-real",children:"Escuchar cambios en tiempo real"}),"\n",(0,i.jsxs)(n.p,{children:["Si queremos que los datos se ",(0,i.jsx)(n.strong,{children:"actualicen autom\xe1ticamente"})," cuando cambien en Firestore, usamos ",(0,i.jsx)(n.code,{children:"addSnapshotListener()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception")\r\n    .addSnapshotListener((documentSnapshot, e) -> {\r\n        if (e != null) {\r\n            Log.w("Firestore", "Error al escuchar cambios", e);\r\n            return;\r\n        }\r\n\r\n        if (documentSnapshot != null && documentSnapshot.exists()) {\r\n            String titulo = documentSnapshot.getString("titulo");\r\n            String director = documentSnapshot.getString("director");\r\n            Log.d("Firestore", "Datos actualizados -> T\xedtulo: " + titulo + ", Director: " + director);\r\n        }\r\n    });\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["La aplicaci\xf3n escucha cambios en el documento ",(0,i.jsx)(n.strong,{children:'"inception"'}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Si el documento se modifica, la funci\xf3n se ejecuta autom\xe1ticamente."}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"3-actualizar-documentos-en-firestore",children:["3. ",(0,i.jsx)(n.strong,{children:"Actualizar documentos en Firestore"})]}),"\n",(0,i.jsx)(n.p,{children:"Actualizar documentos en Firestore nos permite modificar datos sin necesidad de eliminarlos o reemplazarlos por completo. Existen varias formas de realizar una actualizaci\xf3n:"}),"\n",(0,i.jsxs)(n.h3,{id:"sobrescribir-un-documento-completamente-set",children:["Sobrescribir un documento completamente (",(0,i.jsx)(n.code,{children:"set()"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Cuando usamos ",(0,i.jsx)(n.code,{children:"set()"})," en un documento existente, Firestore ",(0,i.jsx)(n.strong,{children:"sobrescribe"})," todos los datos previos con los nuevos. Si el documento no existe, lo crea."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n// Nuevo conjunto de datos (sobreescribe todo)\r\nMap<String, Object> pelicula = new HashMap<>();\r\npelicula.put("titulo", "Interstellar");\r\npelicula.put("director", "Christopher Nolan");\r\npelicula.put("a\xf1o", 2014);\r\npelicula.put("genero", "Ciencia Ficci\xf3n");\r\n\r\n// Sobrescribir completamente el documento con ID "inception"\r\ndb.collection("peliculas").document("inception")\r\n    .set(pelicula)\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Documento sobrescrito con \xe9xito"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al sobrescribir documento", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".set(pelicula)"})," reemplaza ",(0,i.jsx)(n.strong,{children:"todo el contenido"})," del documento ",(0,i.jsx)(n.strong,{children:'"inception"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Si ",(0,i.jsx)(n.strong,{children:"faltan campos en el nuevo mapa"}),", los valores anteriores se perder\xe1n."]}),"\n"]})]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["Si el documento conten\xeda otros campos no incluidos en ",(0,i.jsx)(n.code,{children:"pelicula"}),", ",(0,i.jsx)(n.strong,{children:"se eliminar\xe1n"}),"."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"actualizar-solo-campos-espec\xedficos-update",children:["Actualizar solo campos espec\xedficos (",(0,i.jsx)(n.code,{children:"update()"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Si solo queremos modificar ciertos campos sin afectar los dem\xe1s, usamos ",(0,i.jsx)(n.code,{children:"update()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception")\r\n    .update("a\xf1o", 2020)  // Modifica solo el campo "a\xf1o"\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Campo actualizado"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al actualizar campo", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Solo se actualiza el campo ",(0,i.jsx)(n.strong,{children:'"a\xf1o"'}),", manteniendo el resto del documento intacto."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Si el documento no existe, la operaci\xf3n fallar\xe1"}),"."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.h3,{id:"a\xf1adir-nuevos-campos-sin-sobrescribir-set-con-merge",children:["A\xf1adir nuevos campos sin sobrescribir (",(0,i.jsx)(n.code,{children:"set()"})," con ",(0,i.jsx)(n.code,{children:"merge()"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Si queremos ",(0,i.jsx)(n.strong,{children:"agregar nuevos campos"})," sin eliminar los existentes, usamos ",(0,i.jsx)(n.code,{children:"SetOptions.merge()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.google.firebase.firestore.SetOptions;\r\n\r\nMap<String, Object> nuevaInfo = new HashMap<>();\r\nnuevaInfo.put("duracion", 148);  // Nuevo campo: duraci\xf3n en minutos\r\n\r\ndb.collection("peliculas").document("inception")\r\n    .set(nuevaInfo, SetOptions.merge())  // Agrega sin borrar los datos existentes\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Campo agregado sin sobrescribir"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al agregar campo", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".set(nuevaInfo, SetOptions.merge())"})," ",(0,i.jsx)(n.strong,{children:"fusiona"})," los nuevos datos con los existentes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No elimina los campos previos"}),", solo agrega o actualiza los especificados."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.h3,{id:"incrementar-valores-num\xe9ricos-fieldvalueincrement",children:["Incrementar valores num\xe9ricos (",(0,i.jsx)(n.code,{children:"FieldValue.increment()"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Si queremos ",(0,i.jsx)(n.strong,{children:"sumar o restar valores num\xe9ricos"}),", usamos ",(0,i.jsx)(n.code,{children:"FieldValue.increment()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import com.google.firebase.firestore.FieldValue;\r\n\r\ndb.collection("peliculas").document("inception")\r\n    .update("visualizaciones", FieldValue.increment(1))  // Incrementa en 1\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Visualizaciones incrementadas"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al incrementar visualizaciones", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Si el campo no existe"}),", se crea autom\xe1ticamente con el valor ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Se usa ",(0,i.jsx)(n.code,{children:"FieldValue.increment(valor)"})," para ",(0,i.jsx)(n.strong,{children:"sumar o restar"})," valores sin necesidad de obtener el documento primero."]}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"actualizar-arrays-fieldvaluearrayunion-y-fieldvaluearrayremove",children:["Actualizar arrays (",(0,i.jsx)(n.code,{children:"FieldValue.arrayUnion()"})," y ",(0,i.jsx)(n.code,{children:"FieldValue.arrayRemove()"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Firestore permite agregar o eliminar elementos en arrays sin sobrescribirlos."}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsxs)(n.strong,{children:["Ejemplo: Agregar un nuevo actor al array ",(0,i.jsx)(n.code,{children:"actores"})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception")\r\n    .update("actores", FieldValue.arrayUnion("Leonardo DiCaprio"))\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Actor agregado"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al agregar actor", e));\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsxs)(n.strong,{children:["Ejemplo: Eliminar un actor del array ",(0,i.jsx)(n.code,{children:"actores"})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception")\r\n    .update("actores", FieldValue.arrayRemove("Leonardo DiCaprio"))\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Actor eliminado"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al eliminar actor", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FieldValue.arrayUnion()"})," agrega valores al array ",(0,i.jsx)(n.strong,{children:"sin duplicados"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FieldValue.arrayRemove()"})," elimina un valor espec\xedfico del array."]}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"4-eliminar-documentos",children:["4. ",(0,i.jsx)(n.strong,{children:"Eliminar documentos"})]}),"\n",(0,i.jsxs)(n.p,{children:["Firestore permite eliminar tanto documentos completos como campos espec\xedficos dentro de un documento. Sin embargo, es importante notar que la eliminaci\xf3n de un documento ",(0,i.jsx)(n.strong,{children:"no elimina sus subcolecciones"}),". Estas seguir\xe1n existiendo en la base de datos hasta que se eliminen manualmente."]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-un-documento-completo",children:"Eliminar un documento completo"}),"\n",(0,i.jsxs)(n.p,{children:["Para eliminar un documento por su ID, usamos ",(0,i.jsx)(n.code,{children:".delete()"})," sobre la referencia al documento."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\ndb.collection("peliculas").document("inception")\r\n    .delete()\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Documento eliminado con \xe9xito"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al eliminar documento", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'document("inception")'})," accede al documento con el ID ",(0,i.jsx)(n.strong,{children:'"inception"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".delete()"})," lo elimina por completo de Firestore."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Si el documento no existe, Firestore no generar\xe1 un error"}),", simplemente no har\xe1 nada."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Importante:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Las subcolecciones del documento eliminado seguir\xe1n existiendo"})," en Firestore."]}),"\n",(0,i.jsx)(n.li,{children:"Si necesitas eliminar una subcolecci\xf3n junto con el documento, debes hacerlo manualmente recorriendo sus elementos y elimin\xe1ndolos."}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-un-campo-dentro-de-un-documento",children:"Eliminar un campo dentro de un documento"}),"\n",(0,i.jsxs)(n.p,{children:["Si solo queremos borrar un campo dentro del documento pero sin eliminarlo completamente, podemos usar ",(0,i.jsx)(n.code,{children:"FieldValue.delete()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas").document("inception")\r\n    .update("genero", FieldValue.delete())\r\n    .addOnSuccessListener(aVoid -> Log.d("Firestore", "Campo eliminado con \xe9xito"))\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al eliminar campo", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'.update("genero", FieldValue.delete())'})," borra \xfanicamente el campo ",(0,i.jsx)(n.strong,{children:'"genero"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Los dem\xe1s campos del documento permanecen intactos"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Si el campo ",(0,i.jsx)(n.strong,{children:"no existe"}),", Firestore simplemente ignora la operaci\xf3n."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-todos-los-documentos-de-una-colecci\xf3n",children:"Eliminar todos los documentos de una colecci\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Firestore ",(0,i.jsx)(n.strong,{children:"no permite eliminar una colecci\xf3n directamente"}),", por lo que debemos recorrer cada documento y eliminarlo uno por uno."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'db.collection("peliculas")\r\n    .get()\r\n    .addOnSuccessListener(queryDocumentSnapshots -> {\r\n        for (DocumentSnapshot document : queryDocumentSnapshots) {\r\n            db.collection("peliculas").document(document.getId()).delete();\r\n        }\r\n        Log.d("Firestore", "Todos los documentos eliminados");\r\n    })\r\n    .addOnFailureListener(e -> Log.w("Firestore", "Error al eliminar documentos", e));\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se obtiene ",(0,i.jsx)(n.strong,{children:"todos los documentos"})," de la colecci\xf3n ",(0,i.jsx)(n.strong,{children:'"peliculas"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Se recorren los documentos y se eliminan ",(0,i.jsx)(n.strong,{children:"uno por uno"})," con ",(0,i.jsx)(n.code,{children:".delete()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No se eliminan las subcolecciones autom\xe1ticamente"}),"."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Consideraciones importantes:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Si hay ",(0,i.jsx)(n.strong,{children:"muchos documentos"})," en la colecci\xf3n, la operaci\xf3n puede ser lenta."]}),"\n",(0,i.jsx)(n.li,{children:"Para evitar problemas de rendimiento, se recomienda eliminar documentos en lotes."}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-un-documento-y-todas-sus-subcolecciones",children:"Eliminar un documento y todas sus subcolecciones"}),"\n",(0,i.jsxs)(n.p,{children:["Firestore ",(0,i.jsx)(n.strong,{children:"no elimina autom\xe1ticamente las subcolecciones"})," cuando se borra un documento. Si queremos eliminar un documento y todas sus subcolecciones, debemos recorrerlas manualmente."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,i.jsx)(n.strong,{children:"Ejemplo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'void eliminarDocumentoYSubcolecciones(String coleccion, String documentoId) {\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    \r\n    // Obtener subcolecciones del documento\r\n    db.collection(coleccion).document(documentoId).collection("rese\xf1as")\r\n        .get()\r\n        .addOnSuccessListener(queryDocumentSnapshots -> {\r\n            for (DocumentSnapshot subdocumento : queryDocumentSnapshots) {\r\n                db.collection(coleccion).document(documentoId)\r\n                    .collection("rese\xf1as").document(subdocumento.getId()).delete();\r\n            }\r\n\r\n            // Eliminar el documento principal despu\xe9s de borrar las subcolecciones\r\n            db.collection(coleccion).document(documentoId)\r\n                .delete()\r\n                .addOnSuccessListener(aVoid -> Log.d("Firestore", "Documento y subcolecciones eliminados"))\r\n                .addOnFailureListener(e -> Log.w("Firestore", "Error al eliminar documento", e));\r\n        });\r\n}\r\n\r\n// Llamada a la funci\xf3n\r\neliminarDocumentoYSubcolecciones("peliculas", "inception");\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Explicaci\xf3n:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Primero, obtenemos los documentos de la subcolecci\xf3n ",(0,i.jsx)(n.strong,{children:'"rese\xf1as"'})," dentro del documento ",(0,i.jsx)(n.strong,{children:'"inception"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Eliminamos ",(0,i.jsx)(n.strong,{children:"cada documento de la subcolecci\xf3n"})," uno por uno."]}),"\n",(0,i.jsxs)(n.li,{children:["Finalmente, eliminamos el documento ",(0,i.jsx)(n.strong,{children:'"inception"'}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>a});var r=o(6540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);