"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[4350],{7810:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/Supabase/tablonDeAnuncios","title":"5.5.3 Tabl\xf3n de Anuncios","description":"Vamos a a\xf1adir una nueva funcionalidad a la aplicaci\xf3n Tabl\xf3n de Anuncios creada en el punto anteriro (Firestore)","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/Supabase/tablonDeAnuncios.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/Supabase","slug":"/aplicaciones m\xf3viles/5 Persistencia/Supabase/tablonDeAnuncios","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/Supabase/tablonDeAnuncios","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3}}');var i=a(4848),o=a(8453);const t={sidebar_position:3},l="5.5.3 Tabl\xf3n de Anuncios",s={},c=[{value:"1. <strong>Actualizar el Modelo</strong>",id:"1-actualizar-el-modelo",level:2},{value:"2. <strong>Crear una clase para el servicio Supabase</strong>",id:"2-crear-una-clase-para-el-servicio-supabase",level:2},{value:"3. <strong>Adaptar el repositorio</strong>",id:"3-adaptar-el-repositorio",level:2},{value:"4. <strong>Adaptar el ViewModel</strong>",id:"4-adaptar-el-viewmodel",level:2},{value:"5. <strong>Adaptar la Vista</strong>",id:"5-adaptar-la-vista",level:2},{value:"Agregar un bot\xf3n y un ImageView al layout del elemento Anuncio.",id:"agregar-un-bot\xf3n-y-un-imageview-al-layout-del-elemento-anuncio",level:3},{value:"Modificar el Adatador del ReciclerView.",id:"modificar-el-adatador-del-reciclerview",level:3},{value:"Modificar el Fragmento que implementa el ReciclerView.",id:"modificar-el-fragmento-que-implementa-el-reciclerview",level:3},{value:"6. <strong>Prueba la aplicaci\xf3n</strong>",id:"6-prueba-la-aplicaci\xf3n",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"553-tabl\xf3n-de-anuncios",children:"5.5.3 Tabl\xf3n de Anuncios"})}),"\n",(0,i.jsx)(n.p,{children:"Vamos a a\xf1adir una nueva funcionalidad a la aplicaci\xf3n Tabl\xf3n de Anuncios creada en el punto anteriro (Firestore)"}),"\n",(0,i.jsx)("div",{style:{margin:"0 auto",width:"250px"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Presentaci\xf3n de la 2\xaa version de la app Tabl\xf3n de Anuncios",src:a(9412).A+"",title:"Presentaci\xf3n de la 2\xaa version de la app de Tabl\xf3n de Anuncios",width:"333",height:"747"})})}),"\n",(0,i.jsx)(n.p,{children:"Para a\xf1adir im\xe1genes almacenadas en la nube a los anuncios de nuestro tabl\xf3n vamos anecesitar las siguientes modificaciones..."}),"\n",(0,i.jsxs)(n.h2,{id:"1-actualizar-el-modelo",children:["1. ",(0,i.jsx)(n.strong,{children:"Actualizar el Modelo"})]}),"\n",(0,i.jsxs)(n.p,{children:["Deberemos a\xf1adir a nuestra clase Anuncio los ",(0,i.jsx)(n.strong,{children:"atributos y m\xe9todos necesarios para almacenar la URL de la imagen"})," del anuncio."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="model/Anuncio.java"',children:"package com.agora.tablonfirestore.model;\r\n\r\npublic class Anuncio {\r\n    private String id;\r\n    private String contenido;\r\n    private long fecha;\r\n    private String uidAutor;\r\n   // highlight-next-line\r\n    private String imagen;\r\n\r\n    public Anuncio() {} // Constructor vac\xedo para Firebase\r\n\r\n    public Anuncio(String id, String contenido, long fecha, String uidAutor) {\r\n        this.id = id;\r\n        this.contenido = contenido;\r\n        this.fecha = fecha;\r\n        this.uidAutor = uidAutor;\r\n    }\r\n\r\n    public String getId() { return id; }\r\n    public String getContenido() { return contenido; }\r\n    public long getFecha() { return fecha; }\r\n    public String getUidAutor() { return uidAutor; }\r\n\r\n   // highlight-start\r\n    public void setImagen(String imagen) {\r\n        this.imagen = imagen;\r\n    }\r\n\r\n    public String getImagen() {\r\n        return imagen;\r\n    }\r\n       // highlight-end\r\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"2-crear-una-clase-para-el-servicio-supabase",children:["2. ",(0,i.jsx)(n.strong,{children:"Crear una clase para el servicio Supabase"})]}),"\n",(0,i.jsxs)(n.p,{children:["En nuestro modelo, crearemos una clase para manejar las peticiones a la API de supabase. Podemos llamar a esta clase ",(0,i.jsx)(n.code,{children:"SupabaseStorageService"})," ya que se encargar\xe1 de las peticiones al servicio de ",(0,i.jsx)(n.strong,{children:"storage"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="model/SupabaseStorageService.java"',children:'package com.agora.tablonfirestore.model;\r\n\r\nimport android.content.ContentResolver;\r\nimport android.content.Context;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\n\r\nimport okhttp3.*;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\n/*\r\n * Esta clase se encarga de gestionar la subida de im\xe1genes\r\n * a un bucket de almacenamiento en Supabase.\r\n */\r\npublic class SupabaseStorageService {\r\n\r\n    // URL base de tu proyecto en Supabase. Aqu\xed se indican el protocolo (https),\r\n    // la subdominio y el dominio con la ruta del proyecto.\r\n    private static final String SUPABASE_URL = "https://nilzuhkcvqjiuvylgmqd.supabase.co";\r\n\r\n    // Clave de acceso a Supabase. Es necesaria para autorizar las peticiones.\r\n    // Esta clave suele encontrarse en las configuraciones del proyecto de Supabase.\r\n    private static final String SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pbHp1aGtjdnFqaXV2eWxnbXFkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg4NzAxNzQsImV4cCI6MjA1NDQ0NjE3NH0.p0bevRZTdbAJgeetpUUfj_eH_R47IFqSu-xDqJcyZls";\r\n    \r\n    // Nombre del bucket donde se almacenar\xe1n las im\xe1genes\r\n    // (tal como se haya configurado en Supabase Storage).\r\n    private static final String BUCKET = "imagenes";\r\n\r\n    // Cliente OkHttp para realizar peticiones HTTP.\r\n    private final OkHttpClient client = new OkHttpClient();\r\n\r\n    // Contexto de la aplicaci\xf3n. Se necesita para acceder al ContentResolver\r\n    // y poder abrir el InputStream de la imagen.\r\n    private final Context context;\r\n\r\n    /*\r\n     * Interfaz para manejar los resultados de la subida de la imagen.\r\n     * - onSuccess: si la subida fue exitosa, se pasa la URL p\xfablica de la imagen.\r\n     * - onFailure: si ocurre alg\xfan error, se notifica con el mensaje correspondiente.\r\n     */\r\n    public interface UploadCallback {\r\n        void onSuccess(String url);\r\n        void onFailure(String error);\r\n    }\r\n\r\n    /*\r\n     * Constructor que recibe el contexto para poder trabajar con\r\n     * recursos de Android (como el ContentResolver).\r\n     */\r\n    public SupabaseStorageService(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    /*\r\n     * M\xe9todo principal para subir una imagen.\r\n     * uri: la ubicaci\xf3n de la imagen en el dispositivo.\r\n     * userEmail: se utiliza como parte de la ruta de guardado en Supabase (subcarpeta).\r\n     * anuncioId: nombre o identificador del archivo (por ejemplo, "fotoDeAnuncio.jpg").\r\n     * callback: manejo de \xe9xito o error.\r\n     */\r\n    public void subirImagen(Uri uri, String userEmail, String anuncioId, UploadCallback callback) {\r\n        try {\r\n            // Se obtiene el ContentResolver para acceder a la imagen a partir de la uri.\r\n            ContentResolver contentResolver = context.getContentResolver();\r\n\r\n            // Se abre un InputStream para leer los bytes de la imagen.\r\n            InputStream inputStream = contentResolver.openInputStream(uri);\r\n            if (inputStream == null) {\r\n                // Si por alg\xfan motivo no se pudo abrir el InputStream, se notifica error y se sale.\r\n                callback.onFailure("No se pudo abrir el InputStream");\r\n                return;\r\n            }\r\n\r\n            // Se convierten todos los datos del InputStream (imagen) a un array de bytes.\r\n            byte[] imageData = convertirInputStreamABytes(inputStream);\r\n\r\n            // Se define la ruta del archivo dentro del bucket en Supabase.\r\n            // Por ejemplo, se guardar\xe1 en "usuario@example.com/1234.jpg".\r\n            String filePath = userEmail + "/" + anuncioId + ".jpg";\r\n\r\n            // Se construye el cuerpo de la petici\xf3n (multipart/form-data)\r\n            // donde se adjunta la imagen bajo la clave "file".\r\n            RequestBody requestBody = new MultipartBody.Builder()\r\n                    .setType(MultipartBody.FORM)\r\n                    .addFormDataPart(\r\n                            "file",            // Nombre del campo en el formulario\r\n                            filePath,          // Nombre del archivo\r\n                            // Crea un RequestBody espec\xedfico para la imagen con tipo "image/jpeg".\r\n                            RequestBody.create(MediaType.parse("image/jpeg"), imageData)\r\n                    )\r\n                    .build();\r\n\r\n            // Construcci\xf3n de la URL completa hacia donde se har\xe1 el PUT.\r\n            // Formato: https://<URL>/storage/v1/object/<bucket>/<ruta_archivo>\r\n            String url = SUPABASE_URL + "/storage/v1/object/" + BUCKET + "/" + filePath;\r\n\r\n            // Creaci\xf3n de la petici\xf3n HTTP tipo PUT, con las cabeceras necesarias:\r\n            // - Authorization: se pasa la \'Bearer\' token para la API de Supabase.\r\n            // - Content-Type: "image/jpeg".\r\n            Request request = new Request.Builder()\r\n                    .url(url)\r\n                    .header("Authorization", "Bearer " + SUPABASE_KEY)\r\n                    .header("Content-Type", "image/jpeg")\r\n                    .put(requestBody)\r\n                    .build();\r\n\r\n            // Se lanza la operaci\xf3n en un hilo aparte para no bloquear el hilo principal de la app.\r\n            new Thread(() -> {\r\n                try {\r\n                    // Se ejecuta la llamada al servidor.\r\n                    Response response = client.newCall(request).execute();\r\n                    \r\n                    // Se comprueba si la respuesta fue exitosa (c\xf3digo 2xx).\r\n                    if (response.isSuccessful()) {\r\n                        // Si tuvo \xe9xito, se construye la URL p\xfablica de la imagen.\r\n                        // La carpeta "public" se asume habilitada en la pol\xedtica del bucket.\r\n                        String publicUrl = SUPABASE_URL + "/storage/v1/object/public/" + BUCKET + "/" + filePath;\r\n                        callback.onSuccess(publicUrl);\r\n                    } else {\r\n                        // Si ocurre alg\xfan error, se lee el cuerpo de la respuesta para informarlo.\r\n                        String responseBody = response.body() != null ? response.body().string() : "Respuesta vac\xeda";\r\n                        Log.e("Supabase", "Error al subir imagen: " + response.code() + " - " + responseBody);\r\n                        callback.onFailure("Error " + response.code() + ": " + responseBody);\r\n                    }\r\n                } catch (Exception e) {\r\n                    // Cualquier excepci\xf3n se registra y se pasa al callback.\r\n                    Log.e("Supabase", "Excepci\xf3n al subir imagen: " + e.getMessage(), e);\r\n                    callback.onFailure("Error de conexi\xf3n: " + e.getMessage());\r\n                }\r\n            }).start();\r\n\r\n        } catch (Exception e) {\r\n            // Si se produce un error al procesar los datos (por ejemplo, leer la imagen),\r\n            // se notifica al callback.\r\n            callback.onFailure("Error al procesar la imagen: " + e.getMessage());\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Convierte un InputStream en un array de bytes.\r\n     * Esto se utiliza para poder adjuntar la imagen en el cuerpo de la petici\xf3n.\r\n     */\r\n    private byte[] convertirInputStreamABytes(InputStream inputStream) throws IOException {\r\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\r\n        // Se crea un array de lectura de 1KB. Se leer\xe1 en bloques.\r\n        byte[] data = new byte[1024];\r\n        int bytesRead;\r\n        // Se leen los bytes del InputStream y se guardan en el buffer hasta agotar el stream.\r\n        while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {\r\n            buffer.write(data, 0, bytesRead);\r\n        }\r\n        // Se devuelven todos los bytes le\xeddos en un array.\r\n        return buffer.toByteArray();\r\n    }\r\n\r\n}\r\n\r\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"3-adaptar-el-repositorio",children:["3. ",(0,i.jsx)(n.strong,{children:"Adaptar el repositorio"})]}),"\n",(0,i.jsx)(n.p,{children:"Deberemos a\xf1adir a nuestro repositorio los m\xe9todos intermediarios entre la interfaz y el modelo. En este caso..."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="model/TablonRepository.java"',children:'public class TablonRepository {\r\n    //...\r\n/*\r\n * Actualiza la URL de la imagen en un documento "Anuncio" espec\xedfico dentro de Firestore.\r\n */\r\n    public void actualizarImagenAnuncio(String anuncioId, String imagenUrl, AuthCallback callback) {\r\n        // anunciosRef hace referencia a una colecci\xf3n en Firestore que contiene documentos de "Anuncios".\r\n        // Cada documento de "Anuncio" posee un ID, en este caso "anuncioId".\r\n        anunciosRef.document(anuncioId)\r\n                // Se actualiza \xfanicamente el campo "imagen" del documento con la nueva URL (imagenUrl).\r\n                .update("imagen", imagenUrl)\r\n                // addOnSuccessListener: se ejecuta si la operaci\xf3n de actualizaci\xf3n fue exitosa.\r\n                .addOnSuccessListener(aVoid -> {\r\n                    // Se registra en el Logcat de Android un mensaje de \xe9xito.\r\n                    Log.d("Firestore", "Imagen actualizada en el anuncio");\r\n                    // Se llama al m\xe9todo onSuccess() del callback para notificar que todo sali\xf3 bien.\r\n                    callback.onSuccess();\r\n                })\r\n                // addOnFailureListener: se ejecuta si ocurre alg\xfan error durante la operaci\xf3n de actualizaci\xf3n.\r\n                .addOnFailureListener(e -> {\r\n                    // Se registra el error en el Logcat.\r\n                    Log.e("Firestore", "Error al actualizar la imagen", e);\r\n                    // Se llama al m\xe9todo onFailure() del callback y se env\xeda el mensaje de error.\r\n                    callback.onFailure(e.getMessage());\r\n                });\r\n    }\r\n\r\n    //...\r\n}\r\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"4-adaptar-el-viewmodel",children:["4. ",(0,i.jsx)(n.strong,{children:"Adaptar el ViewModel"})]}),"\n",(0,i.jsxs)(n.p,{children:["Del mismo modeo deberemos actualizar el Viewmodel para hacer uso del nuevo m\xe9todo ",(0,i.jsx)(n.code,{children:"actualizarImagenAnuncio()"})," del repositorio"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="model/TablonViewModel.java"',children:"public class TablonViewModel extends ViewModel {\r\n    //...\r\n    public void actualizarImagenAnuncio(String anuncioId, String imagenUrl) {\r\n        repositorio.actualizarImagenAnuncio(anuncioId, imagenUrl, new TablonRepository.AuthCallback() {\r\n            @Override\r\n            public void onSuccess() {\r\n                leerAnuncios();\r\n            }\r\n            @Override\r\n            public void onFailure(String error) {\r\n                anunciosErrorLive.setValue(error);\r\n            }\r\n        });\r\n    }\r\n    //...\r\n} \n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"5-adaptar-la-vista",children:["5. ",(0,i.jsx)(n.strong,{children:"Adaptar la Vista"})]}),"\n",(0,i.jsx)(n.p,{children:"Por \xfaltimo nos quedar\xeda adaptar la vista para a\xf1adir un bot\xf3n que permita agregar una imagen a nuestro anuncio.\r\nEsta acci\xf3n deber\xe1 abrir la galeria para seleccionar una imagen y almacenarla en Supabase Storage, adem\xe1s guardar\xe1 la URL de la imagen en el atributo correspondiente del objeto en Firebase."}),"\n",(0,i.jsx)(n.h3,{id:"agregar-un-bot\xf3n-y-un-imageview-al-layout-del-elemento-anuncio",children:"Agregar un bot\xf3n y un ImageView al layout del elemento Anuncio."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="res/layout/item_anuncio.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\r\n<androidx.cardview.widget.CardView\r\n    //...\r\n\r\n    <LinearLayout\r\n    //...\r\n    //highlight-start\r\n        <ImageView\r\n            android:id="@+id/imagenAnuncio"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            tools:srcCompat="@tools:sample/avatars" />\r\n\r\n        <ImageButton\r\n            android:id="@+id/agregarImagen"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:contentDescription="Agregar Imagen"\r\n            app:srcCompat="@drawable/baseline_add_photo_alternate_24" />\r\n                //highlight-end\r\n    </LinearLayout>\r\n</androidx.cardview.widget.CardView>\r\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"modificar-el-adatador-del-reciclerview",children:"Modificar el Adatador del ReciclerView."}),"\n",(0,i.jsx)(n.p,{children:"Ser\xe1 necesario modificar el adaptador del ReciclerView para dar funcionalidad al bot\xf3n y mostrar la imagen en caso de que exista.\r\nAdem\xe1s, como queremos pasar el Id del Anuncio al Fragment."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="/ui/AnunciosAdapter.java"',children:"\r\npublic class AnunciosAdapter extends RecyclerView.Adapter<AnunciosAdapter.AnuncioViewHolder> {\r\n\r\n    //...\r\n\r\n    // Interfaz para manejar eventos cuando se selecciona la imagen de un anuncio\r\n    private OnImageSelectedListener listener;\r\n\r\n    /*\r\n     * Define el comportamiento al pulsar el bot\xf3n para seleccionar o a\xf1adir imagen a un anuncio.\r\n     * El callback recibe:\r\n     *   - anuncioId: para identificar el anuncio concreto\r\n     *   - userEmail: el email o identificador del usuario autor del anuncio\r\n     */\r\n    public interface OnImageSelectedListener {\r\n        void onImageSelected(String anuncioId, String userEmail);\r\n    }\r\n\r\n    /*\r\n     * Constructor del adaptador.\r\n     *   - lista: lista inicial de anuncios\r\n     *   - listener: callback para manejar la selecci\xf3n de im\xe1genes\r\n     */\r\n    public AnunciosAdapter(List<Anuncio> lista, OnImageSelectedListener listener) {\r\n        this.lista = lista;\r\n        this.listener = listener;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull AnuncioViewHolder holder, int position) {\r\n        // ...\r\n\r\n        // Si hay una imagen en el anuncio, se carga en el ImageView usando Glide\r\n        if (an.getImagen() != null && !an.getImagen().isEmpty()) {\r\n            Glide.with(holder.binding.imagenAnuncio.getContext())\r\n                    .load(an.getImagen())\r\n                    .into(holder.binding.imagenAnuncio);\r\n        } else {\r\n            // Si no hay imagen, se oculta el ImageView\r\n            holder.binding.imagenAnuncio.setVisibility(View.GONE);\r\n        }\r\n\r\n        // Configurar el bot\xf3n que permite al usuario agregar o cambiar la imagen del anuncio\r\n        holder.binding.agregarImagen.setOnClickListener(v -> {\r\n            if (listener != null) {\r\n                // Llamada al callback definido en la interfaz, pasando el ID y el autor del anuncio\r\n                listener.onImageSelected(an.getId(), an.getUidAutor());\r\n            }\r\n            // Notificar posibles cambios\r\n            notifyDataSetChanged();\r\n        });\r\n\r\n        //...\r\n    }\r\n\r\n//...\r\n\r\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Para descargar la imagen de la URL y mostrarla en el anuncio emplearemos la biblioteca ",(0,i.jsx)(n.code,{children:"Glide"})," por lo que tendremos que agregar sus dependencias en Gradle."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="build.gradle.kts (Module)" ',children:'dependencies {\r\n    //...    \r\n    implementation("com.github.bumptech.glide:glide:4.15.1")\r\n    //...\r\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"modificar-el-fragmento-que-implementa-el-reciclerview",children:"Modificar el Fragmento que implementa el ReciclerView."}),"\n",(0,i.jsxs)(n.p,{children:["Para finalizar deberemos actualizar el Fragment ",(0,i.jsx)(n.code,{children:"TablonFragment"})," para poder abrir la galer\xeda y seleccionar una imagen al pulsar el bot\xf3n correspondiente del anuncio."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="/ui/TablonFragment.java"',children:'\r\npublic class TablonFragment extends Fragment {\r\n\r\n    //...\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        \r\n        // ...\r\n\r\n        // Variable para almacenar temporalmente el anuncio seleccionado\r\n        private Anuncio anuncioSeleccionado;\r\n\r\n        /*\r\n        * Launcher para la selecci\xf3n de im\xe1genes desde la galer\xeda.\r\n        * Al obtener el resultado (URI de la imagen), se llama a subirImagenAStorage().\r\n        */\r\n        private ActivityResultLauncher<Intent> seleccionarImagenLauncher =\r\n                registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),\r\n                        result -> {\r\n                            // Verificamos que la operaci\xf3n se haya completado con \xe9xito\r\n                            if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n                                Uri imagenUri = result.getData().getData();\r\n                                // Si hay una imagen y tenemos un anuncio seleccionado, subimos la imagen a Supabase\r\n                                if (imagenUri != null && anuncioSeleccionado != null) {\r\n                                    subirImagenAStorage(imagenUri, anuncioSeleccionado.getId(), anuncioSeleccionado.getUidAutor());\r\n                                }\r\n                            }\r\n                        });\r\n\r\n        /*\r\n        * M\xe9todo que se invoca al pulsar el bot\xf3n de "agregar imagen" en el adaptador.\r\n        * Recibe el ID del anuncio y el email del autor.\r\n        * Lanza un intent para abrir la galer\xeda y obtener la imagen seleccionada.\r\n        */\r\n        public void seleccionarImagen(String anuncioId, String userEmail) {\r\n            // Creamos un objeto Anuncio "dummy" con el ID y usuario para guardarlo temporalmente\r\n            this.anuncioSeleccionado = new Anuncio(anuncioId, "", 0, userEmail);\r\n\r\n            // Creamos un Intent para abrir la galer\xeda (ACTION_PICK) y filtrar solo im\xe1genes\r\n            Intent intent = new Intent(Intent.ACTION_PICK);\r\n            intent.setType("image/*");\r\n            // Iniciamos el ActivityResultLauncher\r\n            seleccionarImagenLauncher.launch(intent);\r\n        }\r\n\r\n        /*\r\n        * Se encarga de subir la imagen a Supabase Storage:\r\n        *   - uri: ubicaci\xf3n de la imagen seleccionada\r\n        *   - anuncioId y userEmail: para construir la ruta/nombre de la imagen en el Storage\r\n        */\r\n        private void subirImagenAStorage(Uri uri, String anuncioId, String userEmail) {\r\n            // Instanciamos el servicio de Supabase, pasando el contexto\r\n            SupabaseStorageService storageService = new SupabaseStorageService(requireContext());\r\n\r\n            // Llamamos al m\xe9todo subirImagen con la URI y los datos del anuncio\r\n            storageService.subirImagen(uri, userEmail, anuncioId, new SupabaseStorageService.UploadCallback() {\r\n                @Override\r\n                public void onSuccess(String url) {\r\n                    // Cuando se completa la subida, actualizamos el Anuncio en Firestore con la URL\r\n                    if (tablonVM != null) {\r\n                        tablonVM.actualizarImagenAnuncio(anuncioId, url);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(String error) {\r\n                    // Si falla, registramos el error en el Logcat\r\n                    Log.e("Supabase", "Error al subir imagen: " + error);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"6-prueba-la-aplicaci\xf3n",children:["6. ",(0,i.jsx)(n.strong,{children:"Prueba la aplicaci\xf3n"})]}),"\n",(0,i.jsx)(n.p,{children:"Felicidades \ud83d\udc4f\ud83c\udffd\ud83d\udc4f\ud83c\udffd. En este punto deber\xedas tener una App que permita publicar anuncios en Firestore con im\xe1genes guardadas en la nube (supabase).\ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9412:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/Tablon_v2-e6825c30fb1d292b915e6b7a08fc34f9.gif"},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var r=a(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);