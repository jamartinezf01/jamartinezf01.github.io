"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[9699],{7864:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/Ejemplo Tabl\xf3n de Anuncios","title":"Ejemplo Tabl\xf3n de Anuncios","description":"En este tutorial crearemos una aplicaci\xf3n Android que implemente un tal\xf3n de anuncios donde se puedan postear anuncios que sean vistos por todos los usuarios y solo puedan ser borrados por el usuario que poste\xf3 el anuncio..","source":"@site/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/Ejemplo Tabl\xf3n de Anuncios.md","sourceDirName":"aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database","slug":"/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/Ejemplo Tabl\xf3n de Anuncios","permalink":"/docs/aplicaciones m\xf3viles/5 Persistencia/FireBase/Real Time Database/Ejemplo Tabl\xf3n de Anuncios","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9}}');var i=r(4848),o=r(8453);const t={sidebar_position:9},l="Ejemplo Tabl\xf3n de Anuncios",s={},c=[{value:"<strong>Creaci\xf3n del Proyecto y Configuraci\xf3n Inicial</strong>",id:"creaci\xf3n-del-proyecto-y-configuraci\xf3n-inicial",level:2},{value:"<strong>Estructura del Proyecto (MVVM y Paquetes)</strong>",id:"estructura-del-proyecto-mvvm-y-paquetes",level:2},{value:"<strong>Creaci\xf3n del modelo</strong>",id:"creaci\xf3n-del-modelo",level:2},{value:"1. Modelo de Datos: Anuncio",id:"1-modelo-de-datos-anuncio",level:3},{value:"2. El Repositorio \xdanico: TablonRepository",id:"2-el-repositorio-\xfanico-tablonrepository",level:3},{value:"<strong>El ViewModel \xdanico: TablonViewModel</strong>",id:"el-viewmodel-\xfanico-tablonviewmodel",level:2},{value:"<strong>Interfaz de Usuario</strong>",id:"interfaz-de-usuario",level:2},{value:"1. Fragmento Tabl\xf3n",id:"1-fragmento-tabl\xf3n",level:3},{value:"2. AnunciosAdapter",id:"2-anunciosadapter",level:3},{value:"<strong>Activity Principal: MainActivity</strong>",id:"activity-principal-mainactivity",level:2},{value:"<strong>Reglas de Seguridad en Realtime Database</strong>",id:"reglas-de-seguridad-en-realtime-database",level:2},{value:"<strong>Prueba la aplicaci\xf3n</strong>",id:"prueba-la-aplicaci\xf3n",level:2}];function d(n){const e={admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"ejemplo-tabl\xf3n-de-anuncios",children:"Ejemplo Tabl\xf3n de Anuncios"})}),"\n",(0,i.jsx)(e.p,{children:"En este tutorial crearemos una aplicaci\xf3n Android que implemente un tal\xf3n de anuncios donde se puedan postear anuncios que sean vistos por todos los usuarios y solo puedan ser borrados por el usuario que poste\xf3 el anuncio.."}),"\n",(0,i.jsx)("div",{style:{margin:"0 auto",width:"250px"},children:(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"Presentaci\xf3n de la 1\xaa version de la app Tabl\xf3n de Anuncios",src:r(3995).A+"",title:"Presentaci\xf3n de la 1\xaa version de la app de Tabl\xf3n de Anuncios",width:"356",height:"797"})})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"creaci\xf3n-del-proyecto-y-configuraci\xf3n-inicial",children:(0,i.jsx)(e.strong,{children:"Creaci\xf3n del Proyecto y Configuraci\xf3n Inicial"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Crear un proyecto"})," en Android Studio:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Selecciona ",(0,i.jsx)(e.strong,{children:"Empty Activity"})," (o Basic Activity)."]}),"\n",(0,i.jsxs)(e.li,{children:["Aseg\xfarate de que el ",(0,i.jsx)(e.strong,{children:"lenguaje"})," sea ",(0,i.jsx)(e.strong,{children:"Java"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Indica un ",(0,i.jsx)(e.strong,{children:"Package name"})," apropiado (p. ej. ",(0,i.jsx)(e.code,{children:"com.ejemplo.tablon"}),")."]}),"\n",(0,i.jsx)(e.li,{children:"M\xednimo SDK: 28 (o el que prefieras)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Activar el soporte para ViewBinding"}),": en el ",(0,i.jsx)(e.code,{children:"build.gradle"})," (M\xf3dulo: app), dentro de ",(0,i.jsx)(e.code,{children:"android {}"}),", a\xf1ade:","\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kotlin",children:"buildFeatures {\r\n    viewBinding true\r\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Configura"})," tu proyecto para emplear ",(0,i.jsx)(e.em,{children:"Autentication"})," y ",(0,i.jsx)(e.em,{children:"RealTime Database"})," del modo visto en apartados anteriores"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sincroniza"})," el proyecto para que se apliquen los cambios."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"estructura-del-proyecto-mvvm-y-paquetes",children:(0,i.jsx)(e.strong,{children:"Estructura del Proyecto (MVVM y Paquetes)"})}),"\n",(0,i.jsx)(e.p,{children:"A continuaci\xf3n se describe una estructura para una aplicaci\xf3n Android (Java) que cumple los siguientes requisitos:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Un ",(0,i.jsx)(e.strong,{children:"Activity de Registro"})," donde el usuario se registra con ",(0,i.jsx)(e.strong,{children:"Email y Password"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Una ",(0,i.jsx)(e.strong,{children:"Activity Principal"})," con ",(0,i.jsx)(e.strong,{children:"un Fragment"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"TablonFragment"}),": Muestra los anuncios y permite publicar uno nuevo."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Se utiliza ",(0,i.jsx)(e.strong,{children:"un solo Repositorio"})," y ",(0,i.jsx)(e.strong,{children:"un solo ViewModel"})," que ser\xe1n compartidos."]}),"\n",(0,i.jsxs)(e.li,{children:["Arquitectura b\xe1sica  ",(0,i.jsx)(e.strong,{children:"MVVM"})," (aunque simplificada)."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"La idea principal es:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"TablonRepository"}),": Accede a Firebase (Auth + Realtime Database)."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"TablonViewModel"}),": Provee m\xe9todos y LiveData para autenticaci\xf3n y anuncios."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"RegistroActivity"}),": Pantalla de registro de usuario."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"MainActivity"}),": Hospeda un Fragment (TablonFragment) y comparte el ",(0,i.jsx)(e.strong,{children:"mismo"})," ",(0,i.jsx)(e.code,{children:"TablonViewModel"}),". Esto permitir\xe1 agregar m\xe1s fragments en el futuro."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Una posible estructura de paquetes ser\xeda la siguiente..."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"com.ejemplo.tablon\r\n \u2523 model\r\n \u2503 \u2523 Anuncio.java\r\n \u2503 \u2517 TablonRepository.java\r\n \u2523 ui\r\n \u2503 \u2523 TablonViewModel.java\r\n \u2503 \u2523 TablonFragment.java\r\n \u2503 \u2517 AnunciosAdapter.java\r\n \u2523 MainActivity.java\r\n \u2517 RegistroActivity.java\r\n\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Puedes ajustar la organizaci\xf3n a tu preferencia, pero esta forma te ayuda a mantener el Repositorio, el ViewModel y las Activities/Fragments separados."}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{title:"Reutilizaci\xf3n de C\xf3digo",type:"tip",children:(0,i.jsxs)(e.p,{children:["Para la actividad ",(0,i.jsx)(e.strong,{children:"RegstroActivity"})," y su ",(0,i.jsx)(e.strong,{children:"layOut"})," emplearemos el c\xf3digo visto en el ",(0,i.jsx)(e.strong,{children:"Ejemplo de Firebase Autentication"}),"."]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"creaci\xf3n-del-modelo",children:(0,i.jsx)(e.strong,{children:"Creaci\xf3n del modelo"})}),"\n",(0,i.jsx)(e.h3,{id:"1-modelo-de-datos-anuncio",children:"1. Modelo de Datos: Anuncio"}),"\n",(0,i.jsxs)(e.p,{children:["Una ",(0,i.jsx)(e.strong,{children:"clase"})," simple con los campos que guardamos en Realtime Database:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",metastring:'title="com/ejemplo/tablon/model/Anuncio.java"',children:"package com.ejemplo.tablon.model;\r\n\r\npublic class Anuncio {\r\n    private String id;\r\n    private String contenido;\r\n    private long fecha;\r\n    private String uidAutor;\r\n\r\n    public Anuncio() {} // Constructor vac\xedo para Firebase\r\n\r\n    public Anuncio(String id, String contenido, long fecha, String uidAutor) {\r\n        this.id = id;\r\n        this.contenido = contenido;\r\n        this.fecha = fecha;\r\n        this.uidAutor = uidAutor;\r\n    }\r\n\r\n    public String getId() { return id; }\r\n    public String getContenido() { return contenido; }\r\n    public long getFecha() { return fecha; }\r\n    public String getUidAutor() { return uidAutor; }\r\n}\n"})}),"\n",(0,i.jsx)(e.admonition,{title:"OJO...",type:"warning",children:(0,i.jsxs)(e.p,{children:["Es imprescindible a\xf1adir un ",(0,i.jsx)(e.strong,{children:"constructor vac\xedo"})," para la correcta implementaci\xf3n del modelo en Firebase"]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"2-el-repositorio-\xfanico-tablonrepository",children:"2. El Repositorio \xdanico: TablonRepository"}),"\n",(0,i.jsxs)(e.p,{children:["Esta clase se encarga de todas las operaciones contra ",(0,i.jsx)(e.strong,{children:"Firebase"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",metastring:'title="com/ejemplo/tablon/model/TablonRepository.java"',children:'package com.agora.tablon.model;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class TablonRepository {\r\n\r\n    // Interfaz para manejar respuestas de autenticaci\xf3n\r\n    public interface AuthCallback {\r\n        void onSuccess();  // Se ejecuta cuando la operaci\xf3n es exitosa\r\n        void onFailure(String error); // Se ejecuta cuando hay un error\r\n    }\r\n\r\n    // Interfaz para manejar respuestas al obtener anuncios\r\n    public interface AnunciosCallback {\r\n        void onSuccess(List<Anuncio> lista);  // Se ejecuta cuando se obtienen los anuncios correctamente\r\n        void onFailure(String error); // Se ejecuta cuando hay un error al obtener los anuncios\r\n    }\r\n\r\n    // Instancia de autenticaci\xf3n de Firebase para manejar usuarios\r\n    private final FirebaseAuth mAuth;\r\n\r\n    // Referencia a la base de datos en Firebase donde se guardan los anuncios\r\n    private final DatabaseReference anunciosRef;\r\n\r\n    // Constructor de la clase\r\n    public TablonRepository() {\r\n        // Habilita la persistencia local de Firebase para que los datos se almacenen en cach\xe9 y funcionen sin conexi\xf3n\r\n        FirebaseDatabase.getInstance().setPersistenceEnabled(true);\r\n\r\n        // Obtiene la instancia de autenticaci\xf3n de Firebase\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        // Obtiene la referencia a la ubicaci\xf3n "anuncios" en la base de datos\r\n        anunciosRef = FirebaseDatabase.getInstance().getReference("anuncios");\r\n\r\n        // Mantiene sincronizados los datos entre Firebase y la cach\xe9 local\r\n        anunciosRef.keepSynced(true);\r\n    }\r\n\r\n    // Obtiene el usuario actualmente autenticado\r\n    public FirebaseUser getUsuarioActual() {\r\n        return mAuth.getCurrentUser();\r\n    }\r\n\r\n    // Publicar un anuncio en Firebase\r\n    public void publicarAnuncio(String contenido, AuthCallback callback) {\r\n        FirebaseUser user = getUsuarioActual();\r\n\r\n        // Verifica si hay un usuario autenticado antes de permitir la publicaci\xf3n\r\n        if (user == null) {\r\n            callback.onFailure("No hay usuario autenticado");\r\n            return;\r\n        }\r\n\r\n        // Genera una clave \xfanica para el nuevo anuncio\r\n        String key = anunciosRef.push().getKey();\r\n\r\n        // Si no se pudo generar la clave, devuelve un error\r\n        if (key == null) {\r\n            callback.onFailure("No se pudo generar clave para el anuncio");\r\n            return;\r\n        }\r\n\r\n        // Crea un objeto Anuncio con los datos\r\n        Anuncio anuncio = new Anuncio(key, contenido, System.currentTimeMillis(), user.getEmail());\r\n\r\n        // Guarda el anuncio en Firebase en la ruta "anuncios/key"\r\n        anunciosRef.child(key).setValue(anuncio)\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        callback.onSuccess(); // Si se guarda correctamente, notifica \xe9xito\r\n                    } else {\r\n                        // Manejo de errores en caso de fallo\r\n                        if (task.getException() != null) {\r\n                            callback.onFailure(task.getException().getMessage());\r\n                        } else {\r\n                            callback.onFailure("Error desconocido al publicar");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    // Leer los anuncios de Firebase\r\n    public void leerAnuncios(AnunciosCallback callback) {\r\n        // Obtiene los \xfaltimos 50 anuncios ordenados por fecha\r\n        anunciosRef.orderByChild("fecha").limitToLast(50)\r\n                .addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        List<Anuncio> lista = new ArrayList<>();\r\n                        \r\n                        // Recorre los datos obtenidos de Firebase y los convierte en objetos Anuncio\r\n                        for (DataSnapshot ds : snapshot.getChildren()) {\r\n                            Anuncio an = ds.getValue(Anuncio.class);\r\n                            if (an != null) lista.add(an);\r\n                        }\r\n\r\n                        // Invierte la lista para mostrar los anuncios m\xe1s recientes primero\r\n                        Collections.reverse(lista);\r\n                        callback.onSuccess(lista);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n                        callback.onFailure(error.getMessage()); // Notifica error si la consulta es cancelada\r\n                    }\r\n                });\r\n    }\r\n\r\n    // Eliminar un anuncio de Firebase\r\n    public void eliminarAnuncio(String id, AuthCallback callback) {\r\n        FirebaseUser user = getUsuarioActual();\r\n\r\n        // Verifica si hay un usuario autenticado antes de permitir la eliminaci\xf3n\r\n        if (user == null) {\r\n            callback.onFailure("No hay usuario autenticado");\r\n            return;\r\n        }\r\n\r\n        // Elimina el anuncio con el ID dado de la base de datos\r\n        anunciosRef.child(id).removeValue()\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        callback.onSuccess(); // Notifica \xe9xito si la eliminaci\xf3n es correcta\r\n                    } else {\r\n                        // Manejo de errores en caso de fallo\r\n                        if (task.getException() != null) {\r\n                            callback.onFailure(task.getException().getMessage());\r\n                        } else {\r\n                            callback.onFailure("Error desconocido al eliminar");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    // B\xfasqueda de anuncios por contenido en Firebase\r\n    public void buscarAnuncios(String texto, AnunciosCallback callback) {\r\n        // Realiza una consulta en Firebase buscando anuncios cuyo contenido comience con el texto dado\r\n        Query query = anunciosRef.orderByChild("contenido")\r\n                .startAt(texto)\r\n                .endAt(texto + "\\uf8ff"); // "\\uf8ff" es un car\xe1cter especial que permite buscar coincidencias con prefijo\r\n\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                List<Anuncio> resultados = new ArrayList<>();\r\n\r\n                // Recorre los resultados y los almacena en una lista\r\n                for (DataSnapshot ds : snapshot.getChildren()) {\r\n                    Anuncio an = ds.getValue(Anuncio.class);\r\n                    if (an != null) resultados.add(an);\r\n                }\r\n                \r\n                callback.onSuccess(resultados); // Devuelve los resultados al callback\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                callback.onFailure(error.getMessage()); // Notifica error si la consulta es cancelada\r\n            }\r\n        });\r\n    }\r\n}\r\n\n'})}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsx)(e.mdxAdmonitionTitle,{children:(0,i.jsx)(e.strong,{children:"Caracter\xedsticas clave del uso de Firebase"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Persistencia habilitada:"})," ",(0,i.jsx)(e.code,{children:"FirebaseDatabase.getInstance().setPersistenceEnabled(true);"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Permite que los datos sigan estando disponibles sin conexi\xf3n."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sincronizaci\xf3n autom\xe1tica:"})," ",(0,i.jsx)(e.code,{children:"anunciosRef.keepSynced(true);"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Asegura que la base de datos local y la remota est\xe9n siempre en sincron\xeda."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsxs)(e.strong,{children:["Uso de ",(0,i.jsx)(e.code,{children:"push()"})," para claves \xfanicas:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Cada anuncio obtiene un identificador \xfanico generado por Firebase, evitando conflictos."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsxs)(e.strong,{children:["Eventos en tiempo real con ",(0,i.jsx)(e.code,{children:"addValueEventListener"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Cada vez que hay un cambio en la base de datos, la interfaz se actualiza autom\xe1ticamente."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(e.admonition,{type:"info",children:(0,i.jsxs)(e.p,{children:["La funci\xf3n ",(0,i.jsx)(e.code,{children:"buscarAnuncios()"})," se ha creado a modo de ejemplo de consulta simple aunque no se emplear\xe1 en este proyecto."]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"el-viewmodel-\xfanico-tablonviewmodel",children:(0,i.jsx)(e.strong,{children:"El ViewModel \xdanico: TablonViewModel"})}),"\n",(0,i.jsx)(e.p,{children:"Utilizamos LiveData y m\xe9todos que internamente llaman al Repositorio. As\xed, cualquier Fragment o Activity que obtenga este ViewModel puede compartir el mismo estado."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",metastring:'title="com/ejemplo/tablon/ui/TablonViewModel.java"',children:"package com.ejemplo.tablon.ui;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModel;\r\n\r\nimport com.ejemplo.tablon.model.TablonRepository;\r\nimport com.ejemplo.tablon.model.Anuncio;\r\nimport com.google.firebase.auth.FirebaseUser;\r\n\r\nimport java.util.List;\r\n\r\npublic class TablonViewModel extends ViewModel {\r\n\r\n    // Instancia del repositorio para gestionar datos en Firebase\r\n    private final TablonRepository repositorio;\r\n\r\n    // LiveData para manejar la lista de anuncios y errores\r\n    private final MutableLiveData<List<Anuncio>> anunciosLive = new MutableLiveData<>();\r\n    private final MutableLiveData<String> anunciosErrorLive = new MutableLiveData<>();\r\n\r\n    // Constructor: Inicializa el repositorio\r\n    public TablonViewModel() {\r\n        repositorio = new TablonRepository();\r\n    }\r\n\r\n    /**\r\n     * Obtiene el usuario actualmente autenticado en Firebase.\r\n     * Se usa para verificar si un usuario est\xe1 logueado y qui\xe9n es.\r\n     */\r\n    public FirebaseUser getUsuarioActual() {\r\n        return repositorio.getUsuarioActual();\r\n    }\r\n\r\n    // ========== M\xc9TODOS PARA EXPONER LiveData A LA VISTA ==========\r\n\r\n    // Permite que la UI observe la lista de anuncios\r\n    public LiveData<List<Anuncio>> getAnunciosLive() { return anunciosLive; }\r\n\r\n    // Permite que la UI observe errores al obtener anuncios\r\n    public LiveData<String> getAnunciosErrorLive() { return anunciosErrorLive; }\r\n\r\n    // ========== M\xc9TODOS DE MANEJO DE ANUNCIOS ==========\r\n\r\n    /**\r\n     * Publica un nuevo anuncio en Firebase.\r\n     * Si la operaci\xf3n es exitosa, recarga la lista de anuncios.\r\n     */\r\n    public void publicarAnuncio(String contenido) {\r\n        repositorio.publicarAnuncio(contenido, new TablonRepository.AuthCallback() {\r\n            @Override\r\n            public void onSuccess() {\r\n                leerAnuncios(); // Recargar la lista de anuncios al publicar uno nuevo\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String error) {\r\n                anunciosErrorLive.setValue(error); // Notifica el error a la UI\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lee los anuncios desde Firebase y los almacena en LiveData.\r\n     * Permite que la UI se actualice autom\xe1ticamente cuando haya cambios en la base de datos.\r\n     */\r\n    public void leerAnuncios() {\r\n        repositorio.leerAnuncios(new TablonRepository.AnunciosCallback() {\r\n            @Override\r\n            public void onSuccess(List<Anuncio> lista) {\r\n                anunciosLive.setValue(lista); // Actualiza la lista de anuncios en la UI\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String error) {\r\n                anunciosErrorLive.setValue(error); // Guarda el error en caso de fallo\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Elimina un anuncio de Firebase si el usuario es el creador.\r\n     * Luego de la eliminaci\xf3n, recarga la lista de anuncios.\r\n     */\r\n    public void eliminarAnuncio(String id) {\r\n        repositorio.eliminarAnuncio(id, new TablonRepository.AuthCallback() {\r\n            @Override\r\n            public void onSuccess() {\r\n                leerAnuncios(); // Recargar la lista de anuncios despu\xe9s de eliminar\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String error) {\r\n                anunciosErrorLive.setValue(error); // Notifica el error a la UI\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\n"})}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:[(0,i.jsx)(e.strong,{children:"Notas"}),":"]}),(0,i.jsxs)(e.p,{children:["Este ViewModel ",(0,i.jsx)(e.strong,{children:"no interact\xfaa directamente con Firebase"}),", sino que delega las operaciones a TablonRepository, que s\xed maneja la comunicaci\xf3n con Firebase Authentication y Firebase Realtime. Database."]})]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"interfaz-de-usuario",children:(0,i.jsx)(e.strong,{children:"Interfaz de Usuario"})}),"\n",(0,i.jsx)(e.h3,{id:"1-fragmento-tabl\xf3n",children:"1. Fragmento Tabl\xf3n"}),"\n",(0,i.jsx)(e.p,{children:"TablonFragment representa la interfaz donde se muestran y gestionan los anuncios en la aplicaci\xf3n."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Muestra un RecyclerView con los anuncios publicados."}),"\n",(0,i.jsx)(e.li,{children:"Permite a los usuarios publicar nuevos anuncios."}),"\n",(0,i.jsx)(e.li,{children:"Observa cambios en la base de datos de Firebase en tiempo real."}),"\n",(0,i.jsx)(e.li,{children:"Implementa swipe para eliminar anuncios, pero solo si el usuario es el autor."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",metastring:'title="com/ejemplo/tablon/ui/TablonFragment.java"',children:'package com.ejemplo.tablon.register;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport com.ejemplo.tablon.databinding.ActivityRegistroBinding;\r\nimport com.ejemplo.tablon.ui.TablonViewModel;\r\n\r\npublic class TablonFragment extends Fragment {\r\n\r\n    // ViewBinding para acceder a los elementos del layout sin usar findViewById()\r\n    private FragmentTablonBinding binding;\r\n\r\n    // ViewModel para interactuar con los datos de los anuncios\r\n    private TablonViewModel tablonVM;\r\n\r\n    // Adaptador para gestionar la lista de anuncios en el RecyclerView\r\n    private AnunciosAdapter adapter;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        // Infla el layout usando ViewBinding\r\n        binding = FragmentTablonBinding.inflate(inflater, container, false);\r\n        return binding.getRoot(); // Retorna la vista ra\xedz del fragmento\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        // Obtenemos una instancia del ViewModel compartido para gestionar los anuncios\r\n        tablonVM = new ViewModelProvider(requireActivity()).get(TablonViewModel.class);\r\n\r\n        // Inicializamos el adaptador con una lista vac\xeda para el RecyclerView\r\n        adapter = new AnunciosAdapter(new ArrayList<>());\r\n\r\n        // Configuraci\xf3n del RecyclerView\r\n        binding.recyclerAnuncios.setLayoutManager(new LinearLayoutManager(requireContext())); // Layout en forma de lista vertical\r\n        binding.recyclerAnuncios.setAdapter(adapter); // Asigna el adaptador al RecyclerView\r\n\r\n        // Observamos cambios en la lista de anuncios desde el ViewModel\r\n        tablonVM.getAnunciosLive().observe(getViewLifecycleOwner(), anuncios -> {\r\n            adapter.setLista(anuncios); // Cuando hay cambios, se actualiza el RecyclerView\r\n        });\r\n\r\n        // Observamos errores en la carga de anuncios\r\n        tablonVM.getAnunciosErrorLive().observe(getViewLifecycleOwner(), error -> {\r\n            if (error != null) {\r\n                Toast.makeText(getContext(), "Error: " + error, Toast.LENGTH_SHORT).show(); // Muestra un mensaje de error\r\n            }\r\n        });\r\n\r\n        // Bot\xf3n para publicar un nuevo anuncio\r\n        binding.btnPublicar.setOnClickListener(v -> {\r\n            // Obtiene el contenido del EditText\r\n            String contenido = binding.etContenido.getText().toString().trim();\r\n            if (!contenido.isEmpty()) {\r\n                // Publica el anuncio usando el ViewModel\r\n                tablonVM.publicarAnuncio(contenido);\r\n                binding.etContenido.setText(""); // Limpia el campo despu\xe9s de publicar\r\n            } else {\r\n                Toast.makeText(getContext(), "Escribe algo antes de publicar", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n        // ===================== GESTO DE SWIPE PARA ELIMINAR ANUNCIOS =====================\r\n\r\n        // Agregar funcionalidad de swipe (deslizamiento) para eliminar anuncios\r\n        new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {\r\n            @Override\r\n            public boolean onMove(@NonNull RecyclerView recyclerView,\r\n                                  @NonNull RecyclerView.ViewHolder viewHolder,\r\n                                  @NonNull RecyclerView.ViewHolder target) {\r\n                return false; // No permitimos arrastrar elementos, solo swipe\r\n            }\r\n\r\n            @Override\r\n            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {\r\n                // Obtener la posici\xf3n del anuncio que se desliz\xf3\r\n                int posicion = viewHolder.getAdapterPosition();\r\n                Anuncio anuncio = adapter.getAnuncioEnPosicion(posicion);\r\n\r\n                // Verificamos si el usuario autenticado es el autor del anuncio\r\n                if (tablonVM.getUsuarioActual() != null &&\r\n                        anuncio.getUidAutor().equals(tablonVM.getUsuarioActual().getEmail())) {\r\n\r\n                    // Mostrar un cuadro de di\xe1logo para confirmar la eliminaci\xf3n\r\n                    new AlertDialog.Builder(requireContext())\r\n                            .setTitle("Eliminar anuncio")\r\n                            .setMessage("\xbfEst\xe1s seguro de que deseas eliminar este anuncio?")\r\n                            .setPositiveButton("S\xed", (dialog, which) -> {\r\n                                tablonVM.eliminarAnuncio(anuncio.getId()); // Eliminar anuncio de Firebase\r\n                            })\r\n                            .setNegativeButton("Cancelar", (dialog, which) -> {\r\n                                adapter.notifyItemChanged(posicion); // Restaurar el elemento si se cancela la eliminaci\xf3n\r\n                            })\r\n                            .show();\r\n                } else {\r\n                    // Si el usuario no es el autor, no se permite eliminar el anuncio\r\n                    Toast.makeText(requireContext(), "No puedes eliminar este anuncio", Toast.LENGTH_SHORT).show();\r\n                    adapter.notifyItemChanged(posicion); // Restaurar el elemento\r\n                }\r\n            }\r\n        }).attachToRecyclerView(binding.recyclerAnuncios); // Vincular la funcionalidad de swipe al RecyclerView\r\n\r\n        // ===================== CARGAR ANUNCIOS DESDE FIREBASE =====================\r\n        tablonVM.leerAnuncios(); // Se llama al iniciar para obtener los anuncios desde Firebase\r\n    }\r\n}\r\n\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Layout"})," (",(0,i.jsx)(e.code,{children:"fragment_tablon.xml"}),") podr\xeda ser:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",metastring:'title="res/layout/fragment_tablon.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\r\n<LinearLayout\r\n    xmlns:android="http://schemas.android.com/apk/res/android"\r\n    android:orientation="vertical"\r\n    android:padding="16dp"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent">\r\n\r\n    \x3c!-- Campo y bot\xf3n para crear anuncios --\x3e\r\n    <EditText\r\n        android:id="@+id/etContenido"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:hint="Contenido del anuncio" />\r\n\r\n    <Button\r\n        android:id="@+id/btnPublicar"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:text="Publicar Anuncio" />\r\n\r\n    \x3c!-- RecyclerView que mostrar\xe1 las tarjetas --\x3e\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id="@+id/recyclerAnuncios"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="match_parent"/>\r\n</LinearLayout>\r\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-anunciosadapter",children:"2. AnunciosAdapter"}),"\n",(0,i.jsx)(e.p,{children:"AnunciosAdapter es un adaptador para RecyclerView que se encarga de mostrar una lista de anuncios en la interfaz de usuario."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Muestra una lista de anuncios en tarjetas (card views) dentro de un RecyclerView."}),"\n",(0,i.jsx)(e.li,{children:"Permite actualizar la lista de anuncios en tiempo real."}),"\n",(0,i.jsx)(e.li,{children:"Convierte la fecha de cada anuncio a un formato legible."}),"\n",(0,i.jsx)(e.li,{children:"Permite obtener un anuncio en una posici\xf3n espec\xedfica (\xfatil para eliminaci\xf3n con swipe)."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",metastring:'title="java/com/ejemplo/tablon/ui/AnunciosAdapter.java"',children:'package com.ejemplo.tablon.ui;\r\n\r\nimport android.view.*;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.ejemplo.tablon.databinding.ItemAnuncioBinding;\r\nimport com.ejemplo.tablon.model.Anuncio;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class AnunciosAdapter extends RecyclerView.Adapter<AnunciosAdapter.AnuncioViewHolder> {\r\n\r\n    // Lista de anuncios que se mostrar\xe1n en el RecyclerView\r\n    private List<Anuncio> lista;\r\n\r\n    // Constructor del adaptador: recibe una lista de anuncios\r\n    public AnunciosAdapter(List<Anuncio> lista) {\r\n        this.lista = lista;\r\n    }\r\n\r\n    /**\r\n     * M\xe9todo para actualizar la lista de anuncios en el RecyclerView.\r\n     * Se usa cuando hay cambios en los datos (Firebase env\xeda actualizaciones).\r\n     */\r\n    public void setLista(List<Anuncio> nuevaLista) {\r\n        this.lista = nuevaLista;\r\n        notifyDataSetChanged(); // Notifica al RecyclerView que los datos han cambiado\r\n    }\r\n\r\n    /**\r\n     * Infla el layout de cada elemento del RecyclerView.\r\n     */\r\n    @NonNull\r\n    @Override\r\n    public AnuncioViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        // Usamos ViewBinding para inflar el layout de cada anuncio\r\n        ItemAnuncioBinding binding = ItemAnuncioBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false);\r\n        return new AnuncioViewHolder(binding);\r\n    }\r\n\r\n    /**\r\n     * Asigna los datos de un anuncio a la vista en una posici\xf3n espec\xedfica.\r\n     */\r\n    @Override\r\n    public void onBindViewHolder(@NonNull AnuncioViewHolder holder, int position) {\r\n        // Obtenemos el anuncio en la posici\xf3n actual\r\n        Anuncio an = lista.get(position);\r\n\r\n        // Mostrar el contenido del anuncio\r\n        holder.binding.textoContenido.setText(an.getContenido());\r\n\r\n        // Mostrar el usuario que public\xf3 el anuncio (podr\xeda ser UID o email)\r\n        holder.binding.textoUsuario.setText("Usuario: " + an.getUidAutor());\r\n\r\n        // Formatear y mostrar la fecha del anuncio\r\n        String fechaFormateada = formatearFecha(an.getFecha());\r\n        holder.binding.textoFecha.setText(fechaFormateada);\r\n    }\r\n\r\n    /**\r\n     * Devuelve el n\xfamero total de anuncios en la lista.\r\n     */\r\n    @Override\r\n    public int getItemCount() {\r\n        return lista.size();\r\n    }\r\n\r\n    /**\r\n     * ViewHolder: Clase interna que representa la vista de cada elemento de la lista.\r\n     */\r\n    static class AnuncioViewHolder extends RecyclerView.ViewHolder {\r\n        private final ItemAnuncioBinding binding;\r\n\r\n        // Constructor: Asigna la vista inflada al ViewHolder\r\n        public AnuncioViewHolder(@NonNull ItemAnuncioBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convierte el timestamp de un anuncio en un formato de fecha legible.\r\n     */\r\n    private String formatearFecha(long timestamp) {\r\n        // Convierte el timestamp en un objeto Date\r\n        Date date = new Date(timestamp);\r\n\r\n        // Define el formato de fecha deseado\r\n        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault());\r\n\r\n        // Retorna la fecha en formato legible\r\n        return "Fecha: " + sdf.format(date);\r\n    }\r\n\r\n    /**\r\n     * Obtiene un anuncio en una posici\xf3n espec\xedfica del RecyclerView.\r\n     * Se usa para eliminar anuncios con swipe.\r\n     */\r\n    public Anuncio getAnuncioEnPosicion(int posicion) {\r\n        return lista.get(posicion);\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Layout"})," (",(0,i.jsx)(e.code,{children:"item_anuncio.xml"}),") podr\xeda ser:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",metastring:'title="res/layout/item_anuncio.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\r\n<androidx.cardview.widget.CardView\r\n    xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="wrap_content"\r\n    android:layout_margin="4dp"\r\n    android:foreground="?android:attr/selectableItemBackground"\r\n    android:clickable="true"\r\n    android:focusable="true"\r\n    app:useCompatPadding="true"\r\n    app:cardUseCompatPadding="true"\r\n    app:cardCornerRadius="8dp"\r\n    app:cardElevation="4dp">\r\n\r\n    <LinearLayout\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:orientation="vertical"\r\n        android:padding="12dp">\r\n\r\n        <TextView\r\n            android:id="@+id/textoContenido"\r\n            android:layout_width="wrap_content"\r\n            android:layout_height="wrap_content"\r\n            android:textStyle="bold"\r\n            android:textSize="16sp"\r\n            android:textColor="@android:color/black"\r\n            android:text="Contenido del anuncio" />\r\n\r\n        <TextView\r\n            android:id="@+id/textoUsuario"\r\n            android:layout_width="wrap_content"\r\n            android:layout_height="wrap_content"\r\n            android:text="Usuario"\r\n            android:textSize="14sp"\r\n            android:textColor="@android:color/darker_gray"\r\n            android:layout_marginTop="4dp"/>\r\n\r\n        <TextView\r\n            android:id="@+id/textoFecha"\r\n            android:layout_width="wrap_content"\r\n            android:layout_height="wrap_content"\r\n            android:text="Fecha"\r\n            android:textSize="13sp"\r\n            android:textColor="@android:color/darker_gray"\r\n            android:layout_marginTop="4dp"/>\r\n    </LinearLayout>\r\n</androidx.cardview.widget.CardView>\r\n\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"activity-principal-mainactivity",children:(0,i.jsx)(e.strong,{children:"Activity Principal: MainActivity"})}),"\n",(0,i.jsxs)(e.p,{children:["Esta Activity simplemente despliega un ",(0,i.jsx)(e.code,{children:"FragmentContainerView"})," que muestra el Fragmento Tabl\xf3n:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.ejemplo.tablon.main;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\n\r\nimport com.ejemplo.tablon.databinding.ActivityMainBinding;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    ActivityMainBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        FirebaseAuth.getInstance().signOut();\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Layout"})," (",(0,i.jsx)(e.code,{children:"activity_main.xml"}),") podr\xeda ser as\xed...:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    xmlns:tools="http://schemas.android.com/tools"\r\n    android:id="@+id/main"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"\r\n    tools:context=".MainActivity">\r\n\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        android:id="@+id/fragmentContainerView"\r\n        android:name="com.agora.tablondeanuncios.ui.TablonFragment"\r\n        android:layout_width="0dp"\r\n        android:layout_height="0dp"\r\n        app:layout_constraintBottom_toBottomOf="parent"\r\n        app:layout_constraintEnd_toEndOf="parent"\r\n        app:layout_constraintStart_toStartOf="parent"\r\n        app:layout_constraintTop_toTopOf="parent" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"reglas-de-seguridad-en-realtime-database",children:(0,i.jsx)(e.strong,{children:"Reglas de Seguridad en Realtime Database"})}),"\n",(0,i.jsx)(e.p,{children:"En la consola de Firebase \u2192 Realtime Database \u2192 Reglas, podr\xedas poner:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "rules": {\r\n    "anuncios": {\r\n      ".read": "auth != null",  \r\n      ".write": "auth != null"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["De esta forma, ",(0,i.jsx)(e.strong,{children:"solo"})," usuarios autenticados pueden leer/escribir en ",(0,i.jsx)(e.code,{children:"anuncios"}),". Si alguien no est\xe1 autenticado, la base de datos denegar\xe1 la operaci\xf3n."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"prueba-la-aplicaci\xf3n",children:(0,i.jsx)(e.strong,{children:"Prueba la aplicaci\xf3n"})}),"\n",(0,i.jsx)(e.p,{children:"Felicidades \ud83d\udc4f\ud83c\udffd\ud83d\udc4f\ud83c\udffd. En este punto deber\xedas tener una App que permitapublicar anuncios en Realtime Database. Ahora a\xf1adiremos nuevas funcionalidades \ud83d\ude80"})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},3995:(n,e,r)=>{r.d(e,{A:()=>a});const a=r.p+"assets/images/Tablon_v1-2244938589a14abfaf217f929df8422b.gif"},8453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>l});var a=r(6540);const i={},o=a.createContext(i);function t(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);