"use strict";(self.webpackChunkp_my_dm=self.webpackChunkp_my_dm||[]).push([[6347],{1046:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"salva/aplicaciones m\xf3viles/5 Persistencia/Room/Caso Pr\xe1ctico/5.4.2 Mostrar Rese\xf1as","title":"Mostrar Lista de Rese\xf1as","description":"En esta primera versi\xf3n del proyecto, vamos a implementar el RecyclerView para mostrar la lista de rese\xf1as. vamos a dise\xf1ar y configurar la base de datos local de nuestra aplicaci\xf3n utilizando Room. Esto nos permitir\xe1 guardar y recuperar las pel\xedculoas o series que el usuario agregue.","source":"@site/docs/salva/aplicaciones m\xf3viles/5 Persistencia/Room/Caso Pr\xe1ctico/5.4.2 Mostrar Rese\xf1as.md","sourceDirName":"salva/aplicaciones m\xf3viles/5 Persistencia/Room/Caso Pr\xe1ctico","slug":"/salva/aplicaciones m\xf3viles/5 Persistencia/Room/Caso Pr\xe1ctico/5.4.2 Mostrar Rese\xf1as","permalink":"/docs/salva/aplicaciones m\xf3viles/5 Persistencia/Room/Caso Pr\xe1ctico/5.4.2 Mostrar Rese\xf1as","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3}}');var i=n(4848),l=n(8453);const s={sidebar_position:3},o="Mostrar Lista de Rese\xf1as",t={},c=[{value:"<strong>Creaci\xf3n del modelo</strong>",id:"creaci\xf3n-del-modelo",level:2},{value:"1. Crear la entidad <code>Pelicula</code>",id:"1-crear-la-entidad-pelicula",level:3},{value:"2. Crear el DAO <code>PeliculaDAO</code>",id:"2-crear-el-dao-peliculadao",level:3},{value:"3. Configurar la Base de Datos Room <code>PeliculasDatabase</code>",id:"3-configurar-la-base-de-datos-room-peliculasdatabase",level:3},{value:"4. Implementar el Repositorio <code>PeliculasRepositorio</code>",id:"4-implementar-el-repositorio-peliculasrepositorio",level:3},{value:"<strong>Implementar el ViewModel <code>PeliculasViewModel</code></strong>",id:"implementar-el-viewmodel-peliculasviewmodel",level:2},{value:"<strong>Dise\xf1o de la Vista</strong>",id:"dise\xf1o-de-la-vista",level:2},{value:"1. Crear el Layout para el dise\xf1o de los elementos de la lista",id:"1-crear-el-layout-para-el-dise\xf1o-de-los-elementos-de-la-lista",level:3},{value:"2. Crear el Adapter del ReciclerView <code>PeliculasAdapter</code>",id:"2-crear-el-adapter-del-reciclerview-peliculasadapter",level:3},{value:"3. Crear el fragmento <code>FragmentListaPeliculas</code> y su Layout",id:"3-crear-el-fragmento-fragmentlistapeliculas-y-su-layout",level:3},{value:"<strong>Modificaci\xf3n de la Actividad Principal</strong>",id:"modificaci\xf3n-de-la-actividad-principal",level:2},{value:"1. Crear un grafo de navegaci\xf3n",id:"1-crear-un-grafo-de-navegaci\xf3n",level:3},{value:"2. Modifica el Layout del MainActivity",id:"2-modifica-el-layout-del-mainactivity",level:3},{value:"3. Modifica el MainActivity",id:"3-modifica-el-mainactivity",level:3},{value:"<strong>Prueba la aplicaci\xf3n</strong>",id:"prueba-la-aplicaci\xf3n",level:2}];function d(e){const a={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"mostrar-lista-de-rese\xf1as",children:"Mostrar Lista de Rese\xf1as"})}),"\n",(0,i.jsxs)(a.p,{children:["En esta primera versi\xf3n del proyecto, vamos a implementar el RecyclerView para mostrar la lista de rese\xf1as. vamos a dise\xf1ar y configurar la base de datos local de nuestra aplicaci\xf3n utilizando ",(0,i.jsx)(a.strong,{children:"Room"}),". Esto nos permitir\xe1 guardar y recuperar las pel\xedculoas o series que el usuario agregue."]}),"\n",(0,i.jsx)("div",{style:{margin:"0 auto",width:"250px"},children:(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"Versi\xf3n b\xe1sica de la App de rese\xf1as de cine",src:n(8749).A+"",title:"Versi\xf3n b\xe1sica de la App de rese\xf1as de cine",width:"1080",height:"2400"})})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"\xbfQu\xe9 vamos a hacer? \ud83e\udd14"})}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["Crear la clase de ",(0,i.jsx)(a.strong,{children:"Entidad"})," para representar las recetas."]}),"\n",(0,i.jsxs)(a.li,{children:["Definir el ",(0,i.jsx)(a.strong,{children:"DAO"})," (Data Access Object) para interactuar con la base de datos."]}),"\n",(0,i.jsxs)(a.li,{children:["Configurar la clase de ",(0,i.jsx)(a.strong,{children:"Base de Datos"}),"."]}),"\n",(0,i.jsxs)(a.li,{children:["Inplementar el ",(0,i.jsx)(a.strong,{children:"repositorio"})," que har\xe1 de intermediario con el ViewModel"]}),"\n",(0,i.jsxs)(a.li,{children:["Implementar una ",(0,i.jsx)(a.strong,{children:"clase ViewModel"})," para exponer los datos del repositorio en la Vista"]}),"\n",(0,i.jsxs)(a.li,{children:["Crearemos una vista mediante un ",(0,i.jsx)(a.strong,{children:"fragmento"})," que nos muestre un ",(0,i.jsx)(a.strong,{children:"ReciclerView"})," con todas las rese\xf1as"]}),"\n",(0,i.jsxs)(a.li,{children:["Implementaremos la vista principal en la ",(0,i.jsx)(a.strong,{children:"MainActivity"})," mediante un ",(0,i.jsx)(a.strong,{children:"NavHostFragment"})," que nos permitir\xe1 insertar posteriormente diferentes fragmentos."]}),"\n"]}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"creaci\xf3n-del-modelo",children:(0,i.jsx)(a.strong,{children:"Creaci\xf3n del modelo"})}),"\n",(0,i.jsxs)(a.h3,{id:"1-crear-la-entidad-pelicula",children:["1. Crear la entidad ",(0,i.jsx)(a.code,{children:"Pelicula"})]}),"\n",(0,i.jsx)(a.p,{children:"El modelo comienza con la definici\xf3n de la Entidad, que describe la estructura de la tabla en la base de datos Room. En este caso, cada cr\xedtica de una pel\xedcula o serie ser\xe1 representada como un registro en la tabla tabla_peliculas."}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Crear la clase ",(0,i.jsx)(a.code,{children:"Pelicula"})]}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Ve a la carpeta ",(0,i.jsx)(a.code,{children:"app/java/com.tu.paquete"}),"."]}),"\n",(0,i.jsxs)(a.li,{children:["Crea un paquete llamado ",(0,i.jsx)(a.code,{children:"Model"})," (esto ayuda a mantener el proyecto organizado)."]}),"\n",(0,i.jsxs)(a.li,{children:["Dentro de este paquete, crea una nueva clase llamada ",(0,i.jsx)(a.code,{children:"Pelicula"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Definir la clase ",(0,i.jsx)(a.code,{children:"Pelicula"})]}),":"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="Model/Pelicula.java"',children:'package com.agora.criticascine.Model; // sustituye esta l\xednea por tu package\r\n\r\nimport androidx.room.Entity;\r\nimport androidx.room.PrimaryKey;\r\n\r\n// Esta clase representa una pel\xedcula o serie en la base de datos.\r\n@Entity(tableName = "tabla_peliculas") // Define el nombre de la tabla en Room.\r\npublic class Pelicula {\r\n\r\n    @PrimaryKey(autoGenerate = true) // Clave primaria que se genera autom\xe1ticamente.\r\n    private int id;\r\n\r\n    private String nombre; // Nombre de la pel\xedcula o serie.\r\n    private String descripcion; // Breve descripci\xf3n o comentario.\r\n    private float valoracion; // Valoraci\xf3n num\xe9rica, por ejemplo, de 0 a 5.\r\n\r\n    // Constructor de la clase.\r\n    public Pelicula(String nombre, String descripcion, float valoracion) {\r\n        this.nombre = nombre;\r\n        this.descripcion = descripcion;\r\n        this.valoracion = valoracion;\r\n    }\r\n\r\n    // M\xe9todos para obtener y modificar el ID.\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    // M\xe9todos para obtener y modificar el nombre.\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    // M\xe9todos para obtener y modificar la descripci\xf3n.\r\n    public String getDescripcion() {\r\n        return descripcion;\r\n    }\r\n\r\n    public void setDescripcion(String descripcion) {\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    // M\xe9todos para obtener y modificar la valoraci\xf3n.\r\n    public float getValoracion() {\r\n        return valoracion;\r\n    }\r\n\r\n    public void setValoracion(float valoracion) {\r\n        this.valoracion = valoracion;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(a.admonition,{title:"Explicaci\xf3n",type:"note",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsxs)(a.strong,{children:["Anotaci\xf3n ",(0,i.jsx)(a.code,{children:"@Entity"})]}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Declara que esta clase corresponde a una tabla de la base de datos Room."}),"\n",(0,i.jsxs)(a.li,{children:["El atributo ",(0,i.jsx)(a.code,{children:"tableName"})," define el nombre de la tabla: ",(0,i.jsx)(a.code,{children:"tabla_peliculas"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Atributos"}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"id"}),": Es la clave primaria, se genera autom\xe1ticamente con ",(0,i.jsx)(a.code,{children:"autoGenerate = true"}),"."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"nombre"}),": Almacena el nombre de la pel\xedcula o serie."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"descripcion"}),": Almacena una breve sinopsis o comentario."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"valoracion"}),": Guarda una valoraci\xf3n num\xe9rica (puede ser un n\xfamero flotante, como 4.5)."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsxs)(a.h3,{id:"2-crear-el-dao-peliculadao",children:["2. Crear el DAO ",(0,i.jsx)(a.code,{children:"PeliculaDAO"})]}),"\n",(0,i.jsxs)(a.p,{children:["El ",(0,i.jsx)(a.strong,{children:"DAO"})," es una interfaz que define las operaciones que se pueden realizar en la base de datos, como insertar, actualizar, eliminar y consultar datos. Room genera autom\xe1ticamente el c\xf3digo necesario para estas operaciones a partir de las anotaciones en el DAO."]}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Crear la interfaz ",(0,i.jsx)(a.code,{children:"PeliculaDAO"})]}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["En el mismo paquete ",(0,i.jsx)(a.code,{children:"Model"}),", crea una nueva interfaz llamada ",(0,i.jsx)(a.code,{children:"PeliculaDAO"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Definir las operaciones del DAO"}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"A\xf1ade los m\xe9todos para interactuar con la base de datos:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="Model/PeliculaDAO.java"',children:'package com.agora.criticascine.Model;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.room.Dao;\r\nimport androidx.room.Delete;\r\nimport androidx.room.Insert;\r\nimport androidx.room.Query;\r\nimport androidx.room.Update;\r\n\r\nimport java.util.List;\r\n\r\n// Esta interfaz define las operaciones para interactuar con la tabla "tabla_peliculas".\r\n@Dao\r\npublic interface PeliculaDAO {\r\n\r\n    // Inserta una nueva pel\xedcula en la tabla.\r\n    @Insert\r\n    void insertar(Pelicula pelicula);\r\n\r\n    // Actualiza una pel\xedcula existente en la tabla.\r\n    @Update\r\n    void actualizar(Pelicula pelicula);\r\n\r\n    // Elimina una pel\xedcula de la tabla.\r\n    @Delete\r\n    void eliminar(Pelicula pelicula);\r\n\r\n    // Consulta todas las pel\xedculas de la tabla, ordenadas por nombre.\r\n    @Query("SELECT * FROM tabla_peliculas ORDER BY nombre ASC")\r\n    LiveData<List<Pelicula>> obtenerTodasLasPeliculas();\r\n\r\n    // Consulta una pel\xedcula espec\xedfica por su nombre.\r\n    @Query("SELECT * FROM tabla_peliculas WHERE nombre = :nombre")\r\n    Pelicula obtenerPeliculaPorNombre(int nombre);\r\n\r\n    // Elimina todas las pel\xedculas de la tabla.\r\n    @Query("DELETE FROM tabla_peliculas")\r\n    void eliminarTodasLasPeliculas();\r\n}\n'})}),"\n",(0,i.jsx)(a.admonition,{title:"Explicaci\xf3n",type:"note",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"@Dao"})}),": define la interfaz que interact\xfaa con la base de datos."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"@Insert"})}),": A\xf1ade una nueva pel\xedcula a la tabla.Room se encarga de generar el c\xf3digo necesario para esta operaci\xf3n."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"@Update"})}),": Actualiza los datos de una pel\xedcula existente."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"@Delete"})}),": Elimina una pel\xedcula espec\xedfica de la tabla."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"@Query"})}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"obtenerTodasLasPeliculas"})}),": Consulta todas las pel\xedculas almacenadas y las devuelve como una lista observable (",(0,i.jsx)(a.code,{children:"LiveData<List<Pelicula>>"}),"). La lista se ordena alfab\xe9ticamente por el nombre."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"obtenerPeliculaPorNombre"})}),": Consulta una pel\xedcula espec\xedfica bas\xe1ndose en su atributo nombre. ",":nombre"," es un par\xe1metro vinculado (bind parameter), de forma que Room reemplaza autom\xe1ticamente ",":nombre"," con el valor pasado al m\xe9todo."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"eliminarTodasLasPeliculas"})}),": Elimina todos los registros de la tabla."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(a.admonition,{type:"info",children:(0,i.jsx)(a.p,{children:"Se han inclu\xeddo, a modo de ejemplo, m\xe1s m\xe9todos de los que nuestra aplicaci\xf3n necesitar\xe1 en realidad. En tus aplicaciones solo debes implementar los m\xe9todos CRUD realmente necesarios."})}),"\n",(0,i.jsx)(a.admonition,{type:"danger",children:(0,i.jsx)(a.p,{children:'En las consultas debes especificar el nombre de la tabla y las columnas, no el nombre de la clase y los atributos. Si utilizaste tableName para modificar el nombre de la tabla, como es nuestro caso, deber\xe1s utilizar "tabla_peliculas" en la consulta y no "Pelicula" (nombre de la clase).'})}),"\n",(0,i.jsxs)(a.h3,{id:"3-configurar-la-base-de-datos-room-peliculasdatabase",children:["3. Configurar la Base de Datos Room ",(0,i.jsx)(a.code,{children:"PeliculasDatabase"})]}),"\n",(0,i.jsxs)(a.p,{children:["La ",(0,i.jsx)(a.strong,{children:"Base de Datos Room"})," es el componente central de Room que gestiona el acceso a las tablas y DAOs. Aqu\xed configuraremos la clase que representar\xe1 nuestra base de datos para interactuar con la tabla ",(0,i.jsx)(a.code,{children:"tabla_peliculas"}),"."]}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Crear la clase ",(0,i.jsx)(a.code,{children:"PeliculasDatabase"})]}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["En el mismo paquete ",(0,i.jsx)(a.code,{children:"Model"}),", crea una nueva clase llamada ",(0,i.jsx)(a.code,{children:"PeliculasDatabase"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Configurar la base de datos"}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"A\xf1ade las anotaciones y m\xe9todos necesarios para que Room la reconozca."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="Model/PeliculasDatabase.java"',children:'package com.agora.criticascine.Model;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\nimport android.content.Context;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n// Clase que representa la base de datos Room para la aplicaci\xf3n.\r\n@Database(entities = {Pelicula.class}, version = 1, exportSchema = false)\r\npublic abstract class PeliculasDatabase extends RoomDatabase {\r\n\r\n    // Define el DAO que interactuar\xe1 con la base de datos.\r\n    public abstract PeliculaDAO peliculaDAO();\r\n\r\n    // Instancia \xfanica de la base de datos para evitar m\xfaltiples inicializaciones.\r\n    private static volatile PeliculasDatabase instancia;\r\n\r\n    // M\xe9todo para obtener la instancia de la base de datos.\r\n    public static PeliculasDatabase obtenerInstancia(final Context context) {\r\n        if (instancia == null) { // Verifica si ya existe una instancia.\r\n            synchronized (PeliculasDatabase.class) {\r\n                if (instancia == null) { // Doble verificaci\xf3n para mayor seguridad.\r\n                    instancia = Room.databaseBuilder(\r\n                                    context.getApplicationContext(),\r\n                                    PeliculasDatabase.class,\r\n                                    "base_datos_peliculas"\r\n                            )\r\n                            .fallbackToDestructiveMigration() // Permite recrear la base en caso de cambios en el esquema.\r\n                            .build();\r\n                }\r\n            }\r\n        }\r\n        return instancia;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(a.admonition,{title:"Explicaci\xf3n",type:"note",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsxs)(a.strong,{children:["Anotaci\xf3n ",(0,i.jsx)(a.code,{children:"@Database"})]}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"entities"})}),": Lista las entidades que estar\xe1n en la base de datos, en este caso solo ",(0,i.jsx)(a.code,{children:"Pelicula"}),"."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"version"})}),": Versi\xf3n de la base de datos, importante para migraciones."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"exportSchema"})}),": Define si Room debe exportar el esquema (opcional, aqu\xed desactivado)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsxs)(a.strong,{children:["M\xe9todo abstracto ",(0,i.jsx)(a.code,{children:"peliculaDAO()"})]}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Room generar\xe1 autom\xe1ticamente el c\xf3digo para implementar este m\xe9todo, proporcionando el DAO ",(0,i.jsx)(a.code,{children:"PeliculaDAO"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsxs)(a.strong,{children:[(0,i.jsx)(a.code,{children:"Room.databaseBuilder"})," crea la base de datos"]}),":. Sus par\xe1metros son","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Contexto de aplicaci\xf3n."}),"\n",(0,i.jsx)(a.li,{children:"La clase que representa la base de datos (PeliculasDatabase.class)."}),"\n",(0,i.jsx)(a.li,{children:"El nombre del archivo SQLite (base_datos_peliculas.db)."}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"fallbackToDestructiveMigration()"}),": Elimina y recrea la base de datos si se detectan cambios en el esquema que no tienen una migraci\xf3n definida. Ideal para desarrollo, pero en producci\xf3n se recomienda definir migraciones."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(a.admonition,{title:"Patr\xf3n Singleton",type:"info",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Por qu\xe9 usar un Singleton"}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Garantiza que solo exista una \xfanica instancia de la base de datos en toda la aplicaci\xf3n."}),"\n",(0,i.jsx)(a.li,{children:"Evita problemas de acceso simult\xe1neo desde m\xfaltiples hilos."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsxs)(a.h3,{id:"4-implementar-el-repositorio-peliculasrepositorio",children:["4. Implementar el Repositorio ",(0,i.jsx)(a.code,{children:"PeliculasRepositorio"})]}),"\n",(0,i.jsxs)(a.p,{children:["El ",(0,i.jsx)(a.strong,{children:"Repositorio"})," es una capa que act\xfaa como intermediaria entre el ViewModel y la base de datos. Su funci\xf3n principal es abstraer el origen de los datos y centralizar la l\xf3gica para acceder a ellos, lo que facilita cambios futuros, como a\xf1adir una fuente de datos remota."]}),"\n",(0,i.jsx)("div",{style:{margin:"0 auto",width:"500px"},children:(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"Funci\xf3n del repositorio en la arquitectura MVVM",src:n(7237).A+"",title:"Funci\xf3n del repositorio en la arquitectura MVVM",width:"720",height:"540"})})}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Crear la clase ",(0,i.jsx)(a.code,{children:"PeliculasRepositorio"})]}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["En el paquete ",(0,i.jsx)(a.code,{children:"modelo"}),", crea una nueva clase llamada ",(0,i.jsx)(a.code,{children:"PeliculasRepositorio"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Implementar la l\xf3gica del Repositorio"}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Define m\xe9todos que interact\xfaen con el DAO y expongan los datos al ViewModel."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="Model/PeliculasRepositorio.java"',children:"package com.agora.criticascine.Model;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.LiveData;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.Executor;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class PeliculasRepositorio {\r\n\r\n    // DAO para interactuar con la base de datos.\r\n    private final PeliculaDAO peliculaDAO;\r\n\r\n    // Define un Executor para manejar tareas en segundo plano.\r\n    private final Executor databaseExecutor;\r\n\r\n    public PeliculasRepositorio(Application aplicacion) {\r\n        // Obtiene la instancia de la base de datos y el DAO.\r\n        PeliculasDatabase baseDeDatos = PeliculasDatabase.obtenerInstancia(aplicacion);\r\n        peliculaDAO = baseDeDatos.peliculaDAO();\r\n        // Inicializamos el Executor.\r\n        databaseExecutor = Executors.newSingleThreadExecutor();\r\n    }\r\n\r\n    // M\xe9todo para insertar una pel\xedcula en la base de datos.\r\n    public void insertar(Pelicula pelicula) {\r\n        databaseExecutor.execute(() -> peliculaDAO.insertar(pelicula));\r\n    }\r\n\r\n    // M\xe9todo para actualizar una pel\xedcula en la base de datos.\r\n    public void actualizar(Pelicula pelicula) {\r\n        databaseExecutor.execute(() -> peliculaDAO.actualizar(pelicula));\r\n    }\r\n\r\n    // M\xe9todo para eliminar una pel\xedcula de la base de datos.\r\n    public void eliminar(Pelicula pelicula) {\r\n        databaseExecutor.execute(() -> peliculaDAO.eliminar(pelicula));\r\n    }\r\n\r\n    // M\xe9todo para eliminar todas las pel\xedculas.\r\n    public void eliminarTodasLasPeliculas() {\r\n        databaseExecutor.execute(peliculaDAO::eliminarTodasLasPeliculas);\r\n    }\r\n\r\n    // M\xe9todo para obtener todas las pel\xedculas como LiveData.\r\n    public LiveData<List<Pelicula>> obtenerTodasLasPeliculas() {\r\n        return peliculaDAO.obtenerTodasLasPeliculas();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(a.admonition,{title:"Explicaci\xf3n:",type:"note",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Referencias clave"}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"peliculaDAO"}),": Se usa para acceder a los m\xe9todos del DAO."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"todasLasPeliculas"}),": Representa una lista observable de todas las pel\xedculas."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Acceso a la base de datos en segundo plano"}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"PeliculasDatabase.databaseWriteExecutor"})," se utiliza para ejecutar operaciones en un hilo de fondo, evitando bloquear el hilo principal."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"M\xe9todos p\xfablicos"}),":","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"insertar"})}),", ",(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"actualizar"})}),", ",(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"eliminar"})}),", ",(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"eliminarTodasLasPeliculas"})}),": Llaman a los m\xe9todos del DAO en un hilo de fondo."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:(0,i.jsx)(a.code,{children:"obtenerTodasLasPeliculas"})}),": Proporciona un ",(0,i.jsx)(a.code,{children:"LiveData"})," observable que actualiza autom\xe1ticamente la vista cuando los datos cambian."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"implementar-el-viewmodel-peliculasviewmodel",children:(0,i.jsxs)(a.strong,{children:["Implementar el ViewModel ",(0,i.jsx)(a.code,{children:"PeliculasViewModel"})]})}),"\n",(0,i.jsxs)(a.p,{children:["El ",(0,i.jsx)(a.strong,{children:"ViewModel"})," es la capa responsable de gestionar los datos necesarios para la interfaz de usuario. Act\xfaa como un puente entre la vista y el repositorio, exponiendo datos observables que se actualizan autom\xe1ticamente cuando cambian."]}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsxs)(a.strong,{children:["Crear la clase ",(0,i.jsx)(a.code,{children:"PeliculasViewModel"})]}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Ve a la carpeta app/java/com.tu.paquete."}),"\n",(0,i.jsxs)(a.li,{children:["Crea un paquete llamado ",(0,i.jsx)(a.code,{children:"UI"})," (aqu\xed implementaremos todas las clases relacionadas con la interfaz de usuario)."]}),"\n",(0,i.jsxs)(a.li,{children:["Dentro de este paquete, crea una nueva clase llamada ",(0,i.jsx)(a.code,{children:"PeliculasViewModel"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Implementar el ViewModel"}),":"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Extiende de ",(0,i.jsx)(a.code,{children:"AndroidViewModel"})," para tener acceso al contexto de la aplicaci\xf3n."]}),"\n",(0,i.jsx)(a.li,{children:"Define m\xe9todos que interact\xfaen con el repositorio para manejar los datos."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="UI/PeliculasViewModel.java"',children:'package com.agora.criticascine.UI;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\n\r\nimport com.agora.criticascine.Model.Pelicula;\r\nimport com.agora.criticascine.Model.PeliculasRepositorio;\r\n\r\nimport java.util.List;\r\n\r\n// Clase que gestiona los datos observables para la vista.\r\npublic class PeliculasViewModel extends AndroidViewModel {\r\n\r\n    private final PeliculasRepositorio repositorio; // Referencia al repositorio.\r\n    private final LiveData<List<Pelicula>> todasLasPeliculas; // Lista de pel\xedculas observables.\r\n\r\n    // Constructor del ViewModel.\r\n    public PeliculasViewModel(Application aplicacion) {\r\n        super(aplicacion);\r\n        repositorio = new PeliculasRepositorio(aplicacion); // Inicializa el repositorio.\r\n        todasLasPeliculas = repositorio.obtenerTodasLasPeliculas(); // Obtiene todas las pel\xedculas.\r\n\r\n        //Inicializa los datos de muestra al crear el ViewModel.(Ejecutar solo una vez)\r\n        //inicializarPeliculasDeMuestra();\r\n    }\r\n\r\n    // M\xe9todo para insertar pel\xedculas de ejemplo si la base de datos est\xe1 vac\xeda.\r\n    private void inicializarPeliculasDeMuestra() {\r\n        repositorio.eliminarTodasLasPeliculas();\r\n\r\n        repositorio.insertar(new Pelicula("Inception", "Ciencia ficci\xf3n y sue\xf1os compartidos", 1.5f));\r\n        repositorio.insertar(new Pelicula("El Padrino", "Crimen y drama familiar", 5.0f));\r\n        repositorio.insertar(new Pelicula("Interstellar", "Viajes espaciales y emociones humanas", 4.5f));\r\n        repositorio.insertar(new Pelicula("Pulp Fiction", "Crimen y narrativa no lineal", 4.5f));\r\n        repositorio.insertar(new Pelicula("La La Land", "Romance y m\xfasica en Los \xc1ngeles", 0.5f));\r\n        repositorio.insertar(new Pelicula("The Matrix", "Realidad virtual y acci\xf3n", 3.5f));\r\n        repositorio.insertar(new Pelicula("Gladiator", "\xc9pica y venganza en Roma", 4.0f));\r\n        repositorio.insertar(new Pelicula("Forrest Gump", "Historias de superaci\xf3n y amor", 3.0f));\r\n        repositorio.insertar(new Pelicula("Parasite", "Cr\xedtica social y tensi\xf3n", 2.5f));\r\n        repositorio.insertar(new Pelicula("Avengers: Endgame", "H\xe9roes y sacrificios", 3.5f));\r\n     }\r\n\r\n    // M\xe9todo para insertar una nueva pel\xedcula.\r\n    public void insertar(Pelicula pelicula) {\r\n        repositorio.insertar(pelicula);\r\n    }\r\n\r\n    // M\xe9todo para actualizar una pel\xedcula existente.\r\n    public void actualizar(Pelicula pelicula) {\r\n        repositorio.actualizar(pelicula);\r\n    }\r\n\r\n    // M\xe9todo para eliminar una pel\xedcula.\r\n    public void eliminar(Pelicula pelicula) {\r\n        repositorio.eliminar(pelicula);\r\n    }\r\n\r\n    // M\xe9todo para eliminar todas las pel\xedculas.\r\n    public void eliminarTodasLasPeliculas() {\r\n        repositorio.eliminarTodasLasPeliculas();\r\n    }\r\n\r\n    // M\xe9todo para obtener todas las pel\xedculas como LiveData.\r\n    public LiveData<List<Pelicula>> obtenerTodasLasPeliculas() {\r\n        return todasLasPeliculas;\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(a.admonition,{type:"info",children:[(0,i.jsxs)(a.mdxAdmonitionTitle,{children:[(0,i.jsxs)(a.strong,{children:["Extensi\xf3n de ",(0,i.jsx)(a.code,{children:"AndroidViewModel"})]}),":"]}),(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Se utiliza ",(0,i.jsx)(a.code,{children:"AndroidViewModel"})," en lugar de ",(0,i.jsx)(a.code,{children:"ViewModel"})," para obtener acceso al contexto de la aplicaci\xf3n."]}),"\n",(0,i.jsx)(a.li,{children:"Esto es necesario para inicializar el repositorio, ya que requiere el contexto."}),"\n"]})]}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"dise\xf1o-de-la-vista",children:(0,i.jsx)(a.strong,{children:"Dise\xf1o de la Vista"})}),"\n",(0,i.jsxs)(a.p,{children:["Dise\xf1o de la Vista. En este paso, crearemos el layout principal que mostrar\xe1 la lista de ",(0,i.jsx)(a.strong,{children:"pel\xedculas"})," . Utilizaremos un ",(0,i.jsx)(a.strong,{children:"RecyclerView"})," para gestionar los elementos de la lista."]}),"\n",(0,i.jsx)(a.h3,{id:"1-crear-el-layout-para-el-dise\xf1o-de-los-elementos-de-la-lista",children:"1. Crear el Layout para el dise\xf1o de los elementos de la lista"}),"\n",(0,i.jsxs)(a.p,{children:["Crea un archivo llamado ",(0,i.jsx)(a.code,{children:"item_pelicula.xml"})," en la carpeta ",(0,i.jsx)(a.code,{children:"res/layout"}),"."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-xml",metastring:'title="res/layout/item_pelicula.xml"',children:'<androidx.cardview.widget.CardView\r\n    xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="wrap_content"\r\n    android:layout_margin="8dp"\r\n    app:cardCornerRadius="16dp"\r\n    app:cardElevation="8dp">\r\n\r\n    <LinearLayout\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:orientation="vertical"\r\n        android:padding="16dp">\r\n\r\n        <TextView\r\n            android:id="@+id/texto_nombre"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:text="Nombre de la pel\xedcula"\r\n            android:textColor="@android:color/black"\r\n            android:textSize="24sp"\r\n            android:textStyle="bold" />\r\n\r\n        <TextView\r\n            android:id="@+id/texto_descripcion"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:layout_marginTop="4dp"\r\n            android:text="Descripci\xf3n de la pel\xedcula"\r\n            android:textColor="@android:color/darker_gray"\r\n            android:textSize="16sp" />\r\n\r\n        <RatingBar\r\n            android:id="@+id/barra_valoracion"\r\n            android:layout_width="wrap_content"\r\n            android:layout_height="wrap_content"\r\n            android:layout_marginTop="8dp"\r\n            android:numStars="5"\r\n            android:stepSize="0.5"\r\n            android:isIndicator="true"\r\n            android:progressTint="#FFD700"\r\n            android:secondaryProgressTint="#FFECB3"\r\n            android:backgroundTint="#E0E0E0" />\r\n    </LinearLayout>\r\n\r\n</androidx.cardview.widget.CardView>\n'})}),"\n",(0,i.jsx)(a.admonition,{title:"Explicaci\xf3n:",type:"note",children:(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"CardView"}),": Usamos ",(0,i.jsx)(a.code,{children:"CardView"})," para crear las tarjetas flotantes con bordes redondeados."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"RatingBar"}),": El RatingBar es un componente que permite mostrar una valoraci\xf3n num\xe9rica utilizando iconos (generalmente estrellas). Este ejemplo configura un RatingBar en un dise\xf1o XML con varios atributos para personalizar su apariencia y comportamiento.","\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:numStars="5"'})," Establece el n\xfamero total de estrellas que se muestran en el RatingBar."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:stepSize="0.5"'})," Define el tama\xf1o del paso que puede tomar la valoraci\xf3n."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:isIndicator="true"'})," Establece que el RatingBar es solo un indicador visual y l usuario no puede interactuar con \xe9l para cambiar la valoraci\xf3n."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:progressTint="#FFD700"'})," Cambia el color de las estrellas llenas (progreso)."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:secondaryProgressTint="#FFECB3"'})," Cambia el color de las estrellas parcialmente llenas."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:'android:backgroundTint="#E0E0E0"'})," Cambia el color de las estrellas vac\xedas."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsxs)(a.h3,{id:"2-crear-el-adapter-del-reciclerview-peliculasadapter",children:["2. Crear el Adapter del ReciclerView ",(0,i.jsx)(a.code,{children:"PeliculasAdapter"})]}),"\n",(0,i.jsx)(a.p,{children:"El Adaptador es responsable de vincular los datos de la lista con las vistas definidas en el Layout XML. Configuraremos el adaptador para que utilice el ViewHolder y maneje la interacci\xf3n con los datos."}),"\n",(0,i.jsxs)(a.p,{children:["En el paquete ",(0,i.jsx)(a.code,{children:"UI"}),", crea una clase llamada PeliculasAdapter."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="UI/PeliculasAdapter.java"',children:"package com.agora.criticascine.UI;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.agora.criticascine.Model.Pelicula;\r\nimport com.agora.criticascine.databinding.ItemPeliculaBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n// Adaptador para gestionar la lista de pel\xedculas en el RecyclerView.\r\npublic class PeliculasAdapter extends RecyclerView.Adapter<PeliculasAdapter.PeliculasViewHolder> {\r\n\r\n    private List<Pelicula> listaPeliculas = new ArrayList<>(); // Lista de pel\xedculas.\r\n\r\n    @NonNull\r\n    @Override\r\n    public PeliculasViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        // Inflamos el layout de la tarjeta (item_pelicula.xml).\r\n        ItemPeliculaBinding binding = ItemPeliculaBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false);\r\n        return new PeliculasViewHolder(binding);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull PeliculasViewHolder holder, int position) {\r\n        // Obtenemos la pel\xedcula en la posici\xf3n actual.\r\n        Pelicula peliculaActual = listaPeliculas.get(position);\r\n\r\n        // Configuramos los datos en las vistas.\r\n        holder.binding.textoNombre.setText(peliculaActual.getNombre());\r\n        holder.binding.textoDescripcion.setText(peliculaActual.getDescripcion());\r\n        holder.binding.barraValoracion.setRating(peliculaActual.getValoracion());\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        // Devuelve el n\xfamero de elementos en la lista.\r\n        return listaPeliculas.size();\r\n    }\r\n\r\n    // M\xe9todo para actualizar la lista de pel\xedculas.\r\n    public void establecerPeliculas(List<Pelicula> peliculas) {\r\n        this.listaPeliculas = peliculas;\r\n        notifyDataSetChanged(); // Notifica al adaptador que los datos han cambiado.\r\n    }\r\n\r\n    // Clase interna ViewHolder para vincular las vistas de cada tarjeta.\r\n    static class PeliculasViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private final ItemPeliculaBinding binding;\r\n\r\n        public PeliculasViewHolder(@NonNull ItemPeliculaBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(a.h3,{id:"3-crear-el-fragmento-fragmentlistapeliculas-y-su-layout",children:["3. Crear el fragmento ",(0,i.jsx)(a.code,{children:"FragmentListaPeliculas"})," y su Layout"]}),"\n",(0,i.jsxs)(a.p,{children:["Crearemos el ",(0,i.jsx)(a.strong,{children:"fragmento principal"})," que inicializar\xe1 el RecyclerView, conectar\xe1 el adaptador con el ViewModel, y observar\xe1 los datos de la lista de pel\xedculas para actualizarlos autom\xe1ticamente en la interfaz."]}),"\n",(0,i.jsxs)(a.p,{children:["En el paquete ",(0,i.jsx)(a.code,{children:"UI"}),", crea un nuevo Fragment llamado ",(0,i.jsx)(a.code,{children:"FragmentListaPeliculas"}),". Adem\xe1s del archivo .java se generar\xe1 autom\xe1ticamente en la carpeta ",(0,i.jsx)(a.code,{children:"res/layout"})," un archivo llamado ",(0,i.jsx)(a.code,{children:"fragment_lista_peliculas.xml"})," que es el Layout del Fragment ."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="UI/PeliculasAdapter.java"',children:"package com.agora.criticascine.UI;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.agora.criticascine.R;\r\n\r\npublic class FragmentListaPeliculas extends Fragment {\r\n\r\n    private PeliculasViewModel peliculasViewModel; // Referencia al ViewModel.\r\n    private PeliculasAdapter adaptador; // Adaptador para el RecyclerView.\r\n    private FragmentListaPeliculasBinding binding; // Objeto para ViewBinding\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        // Inflamos el dise\xf1o del fragmento.\r\n        binding = FragmentListaPeliculasBinding.inflate(getLayoutInflater());\r\n        return binding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        // Inicializamos el RecyclerView.\r\n        RecyclerView recyclerView = view.findViewById(R.id.recycler_peliculas);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext())); // Dise\xf1o en lista vertical.\r\n\r\n        // Obtenemos una instancia del ViewModel.\r\n        peliculasViewModel = new ViewModelProvider(this).get(PeliculasViewModel.class);\r\n\r\n        // Configuramos el adaptador del RecyclerView.\r\n        adaptador = new PeliculasAdapter();\r\n        recyclerView.setAdapter(adaptador);\r\n\r\n        // Observamos los datos de la lista de pel\xedculas.\r\n        peliculasViewModel.obtenerTodasLasPeliculas().observe(getViewLifecycleOwner(), peliculas -> {\r\n            // Actualizamos los datos del adaptador cuando cambien en el ViewModel.\r\n            adaptador.establecerPeliculas(peliculas);\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["Modifica el archivo ",(0,i.jsx)(a.code,{children:"fragment_lista_peliculas.xml"})," de la carpeta ",(0,i.jsx)(a.code,{children:"res/layout"}),"."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-xml",metastring:'title="res/layout/fragment_lista_peliculas.xml"',children:'<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"\r\n    android:orientation="vertical"\r\n    android:padding="16dp">\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id="@+id/recycler_peliculas"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="match_parent"\r\n        android:clipToPadding="false"\r\n        android:scrollbars="vertical"\r\n        app:layout_constraintBottom_toBottomOf="parent"\r\n        app:layout_constraintEnd_toEndOf="parent"\r\n        app:layout_constraintStart_toStartOf="parent"\r\n        app:layout_constraintTop_toTopOf="parent" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"modificaci\xf3n-de-la-actividad-principal",children:(0,i.jsx)(a.strong,{children:"Modificaci\xf3n de la Actividad Principal"})}),"\n",(0,i.jsxs)(a.p,{children:["Ya hemos comentado que esta aplicaci\xf3n ser\xe1 una aplicaci\xf3n de tipo ",(0,i.jsx)(a.strong,{children:"Single Activity"})," por lo que tendremos que adaptar la actividad principal para que, mediante el uso de un ",(0,i.jsx)(a.strong,{children:"NavHostFragment"}),", sea capaz de motrar diferentes fragmentos seg\xfan nuestras necesidades. Para ello deberemos crear un ",(0,i.jsx)(a.strong,{children:"grafo de navegaci\xf3n"})," y modificar el Layout por defecto del MainActivity."]}),"\n",(0,i.jsx)(a.h3,{id:"1-crear-un-grafo-de-navegaci\xf3n",children:"1. Crear un grafo de navegaci\xf3n"}),"\n",(0,i.jsx)(a.p,{children:"El grafo de navegaci\xf3n es necesario para implementar un NavhostFragment. En este caso el grafo ser\xe1 un grafo simple y solo tendr\xe1 un destino que es el fragmento de la lista de el\xedculas."}),"\n",(0,i.jsxs)(a.p,{children:["A\xf1ade un nuevo Recurso Android de tipo Navigation llamado ",(0,i.jsx)(a.code,{children:"nav_graph.xml"})," en la carpeta ",(0,i.jsx)(a.code,{children:"res/navigation"})]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-xml",metastring:'title="res/navigation/nav_graph.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\r\n<navigation xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    xmlns:tools="http://schemas.android.com/tools"\r\n    android:id="@+id/nav_graph"\r\n    app:startDestination="@id/fragmentListaPeliculas">\r\n\r\n    <fragment\r\n        android:id="@+id/fragmentListaPeliculas"\r\n        android:name="com.agora.criticascine.UI.FragmentListaPeliculas"\r\n        android:label="Lista de Pel\xedculas"\r\n        tools:layout="@layout/fragment_lista_peliculas" />\r\n</navigation>\n'})}),"\n",(0,i.jsx)(a.h3,{id:"2-modifica-el-layout-del-mainactivity",children:"2. Modifica el Layout del MainActivity"}),"\n",(0,i.jsxs)(a.p,{children:["Modifica el archivo ",(0,i.jsx)(a.code,{children:"activity_main.xml"})," en la carpeta ",(0,i.jsx)(a.code,{children:"res/layout"}),"."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-xml",metastring:'title="res/layout/activity_main.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\r\n    xmlns:app="http://schemas.android.com/apk/res-auto"\r\n    xmlns:tools="http://schemas.android.com/tools"\r\n    android:id="@+id/main"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"\r\n    tools:context=".MainActivity">\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        xmlns:android="http://schemas.android.com/apk/res/android"\r\n        android:id="@+id/nav_host_fragment"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="match_parent"\r\n        android:name="androidx.navigation.fragment.NavHostFragment"\r\n        app:defaultNavHost="true"\r\n        app:navGraph="@navigation/nav_graph" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,i.jsx)(a.h3,{id:"3-modifica-el-mainactivity",children:"3. Modifica el MainActivity"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",metastring:'title="MainActivity.java"',children:"package com.agora.criticascine;\r\n\r\nimport android.os.Bundle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.agora.criticascine.databinding.ActivityMainBinding;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    ActivityMainBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"prueba-la-aplicaci\xf3n",children:(0,i.jsx)(a.strong,{children:"Prueba la aplicaci\xf3n"})}),"\n",(0,i.jsx)(a.p,{children:"Felicidades \ud83d\udc4f\ud83c\udffd\ud83d\udc4f\ud83c\udffd. En este punto deber\xedas tener una App que muestre una lista de pel\xedculas con su valoraci\xf3n. Ahora a\xf1adiremos nuevas funcionalidades \ud83d\ude80"})]})}function u(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8749:(e,a,n)=>{n.d(a,{A:()=>r});const r=n.p+"assets/images/app_v1-42c272a7a19097b01007023af57f9c17.png"},7237:(e,a,n)=>{n.d(a,{A:()=>r});const r=n.p+"assets/images/room_repository-11c1ce94615101c3da74a911af1efe44.webp"},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var r=n(6540);const i={},l=r.createContext(i);function s(e){const a=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:a},e.children)}}}]);